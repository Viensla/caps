/* colors */
var cblue = 0x67AAC1;
var cyellow = 0xF7D443;
var cgreen = 0x78AD60;
var cred = 0xC1676A;



var container, scene, renderer, light, ball, plane, bottle, bottlecaps, axes, initEventHandling, initScene;
var WIDTH, HEIGHT, planeWIDTH, planeHEIGHT;

var elements = [], playedCaps = null, mouse_position = new THREE.Vector3, block_offset = new THREE.Vector3, _i, _v3 = new THREE.Vector3, intersect_plane, lookatobj, pilone, mouse,
    mouse3D = new THREE.Vector3;

var _nullVector = new THREE.Vector3(0,0,0), DCMP  = new THREE.Vector3(0,0,0);
var _natVector = new THREE.Vector3(1,1,1);

var onRenderFcts= [];

var lastTimeMsec= null;

var capsYpos = 80;


var movingCaps = null;

var clock = new THREE.Clock(), dir, distance;

var holdingDown = false;

var discImg = THREE.ImageUtils.loadTexture( "images/caps2.jpg" );
var discMat = new THREE.MeshLambertMaterial( { map: discImg } );


var discParticules, discGeo = new THREE.Geometry();


Physijs.scripts.worker = '/js/physijs/physijs_worker.js';
Physijs.scripts.ammo = 'ammo.js';

container = document.querySelector('.viewport');

WIDTH = window.innerWidth;
HEIGHT = window.innerHeight;



var playerDistance = 85;
var globalDirection = 1;

var capsDae;
var capsMesh;

var capModelscale = 1.6;

var geo_caps, mat_caps, bottle_geo, bottle_mat;

var $plpart, $vlpart, plscore = 0, vlscore = 0;

var texture, mat;

var sticker_geo;

var testPly = {
    geo : '',
    mat : ''
};


function loadBottleTools(){
    var loader = new THREE.JSONLoader();



    loader.load( 'model/chimey/chimey.json', function ( cap_geometry, cap_materials ) {

        loader.load( 'model/sticker/sticker.json', function ( sticker_geometry ) {
            sticker_geo = sticker_geometry;
        });
        loader.load( 'model/bottle/bottle_chimey.json', function ( bottle_geometry, bottle_materials ) {

            bottle_geo = bottle_geometry;


            var bottle_material = bottle_materials[ 0 ];
            bottle_material.side = 2;
            bottle_material.map.anisotropy=0;
            bottle_material.shininess = 0;
            bottle_material.shading = 0;
            bottle_material.reflectivity = 0;
            bottle_material.ambient.setHex(0xffffff);
            bottle_material.color.setHex(0xffffff);

            bottle_mat = new THREE.MeshFaceMaterial( bottle_materials );

            geo_caps = cap_geometry;

            var cap_material = cap_materials[ 0 ];
            cap_material.side = 2;
            cap_material.map.anisotropy=0;
            mat_caps = new THREE.MeshFaceMaterial( cap_materials );

            console.log(mat_caps);

            initScene();
        });
    });
}




function create_caps(){
    var randomCaps = Math.random() > 0.98;
    var mass = randomCaps ? 4 : 2;

    var caps_material = Physijs.createMaterial(
        new THREE.MeshLambertMaterial(mat_caps.materials)
    );


    caps_material.side = 2;

    if(randomCaps){
        caps_material.color.setHex( cred );
    }else{
        caps_material.color.setHex( cblue );
    }

    mat_caps.side = 2;

    ball = new Physijs.CylinderMesh(geo_caps, mat_caps, mass, {friction : 0, restitution : 0.8});

    ball.scale.set(capModelscale,capModelscale,capModelscale);


    ball.collisions = 0;
    ball.addEventListener( 'collision', capCollision );



    ball.position.y = 50;
    ball.position.x = 0;
    ball.position.z = playerDistance * globalDirection;
    ball.castShadow = true;
    ball.receiveShadow = true;

    scene.add(ball);
    elements.push(ball);

    playedCaps = ball;

    playedCaps.floating = true;

    if(elements.length > 10){
        var last = elements[0];
        scene.remove(last);
        elements.splice(0, 1);
    }

    if(!Sounds.mute) Sounds.pschit1.play();
}



var caps_geometry;
caps_geometry = new THREE.CylinderGeometry(4, 3, 1.2, 32);

var caps_material = Physijs.createMaterial(
        new THREE.MeshLambertMaterial({
            color: cred
        }), 0.4, 0.8);



var bottlecaps_material = Physijs.createMaterial(
        new THREE.MeshLambertMaterial({
            color: cgreen
        }), 0.4, 0.8),

initScene = function() {

    $plpart = $('.pl-part');
    $vlpart = $('.vl-part');

    scene = new Physijs.Scene();

    scene.setGravity(new THREE.Vector3( 0, -80, 0 ));

    scene.fog = new THREE.Fog( 0x050505, 2000, 3500 );

    renderer = new THREE.WebGLRenderer({
        antialias: true
    });

    renderer.setSize(WIDTH, HEIGHT);
    renderer.shadowMapEnabled = true;
    renderer.shadowMapSoft = true;
    renderer.shadowMapType = THREE.PCFShadowMap;
    renderer.shadowMapAutoUpdate = true;

    renderer.gammaInput = true;
    renderer.gammaOutput = true;

    renderer.setClearColor( scene.fog.color, 1 );
    container.appendChild(renderer.domElement);

    create_camera();

    create_lights();

    create_table();

    // ADD AXES *******************************************************
    axes = buildAxes( 1000 );
    axes.presence = false;
    axes.traverse( function ( object ) { object.visible = false; } );
    scene.add(axes);

    Viensla.initialize();
    Player.initialize();

    create_caps();

    lookatobj = Viensla.bottle;

    scene.simulate();

    initEventHandling();

    spotCreator.create();

    render();

    scene.addEventListener('update', function() {

        if(playedCaps){
            playedCaps.position.copy(DCMP);
        }

        if(holdingDown){
            setPower();
        }

        scene.simulate(undefined, 2);

    });
};


initEventHandling = (function() {
    var projector, ray, intersection,
        handleMouseDown, handleMouseMove, handleMouseUp,
        launchVector = new THREE.Vector3,
        _vector = new THREE.Vector3,
        _angVector = new THREE.Vector3;


    handleMouseDown = function( evt ) {

        if(!playedCaps) return;

        holdingDown = true;

        launchVector.set(1,-3, -100);

        power = 0;
        $('.powerbar').fadeIn();
    };

    handleMouseMove = function( evt ) {
         var mouseX = evt.clientX,
             mouseY = evt.clientY;


        $('.powerbar').css({left:mouseX+50, top:mouseY-50});


        if(!playedCaps) return;
//        if(!holdingDown){
            mouse3D.set(
                ( mouseX / window.innerWidth ) * 2 - 1,
                - ( mouseY / window.innerHeight ) * 2 + 1,
                1 );

            mouse3D.unproject(camera);

            dir = mouse3D.sub( camera.position ).normalize();

            distance = - camera.position.z / dir.z;

            DCMP = camera.position.clone().add( dir.multiplyScalar(distance/2) );

            DCMP.z = playerDistance*globalDirection;
//        }


    };

    handleMouseUp = function( evt ) {

        if(!playedCaps) return;



        holdingDown = false;

        playedCaps.__dirtyPosition = true;
        playedCaps.floating = false;

        _vector.set( 1, 1, 1 );
        _angVector.set( Math.random()*10, Math.random()*10, Math.random()*20);
        playedCaps.setAngularFactor( _vector );

        playedCaps.setLinearFactor( _vector );
        launchVector.set(1,-3, -power*strengh*globalDirection);
        playedCaps.setLinearVelocity( launchVector );
        playedCaps.setAngularVelocity( _angVector );

        playedCaps.position.copy(DCMP);

        playedCaps = null;

        power = 0;

        $('.powerbar').fadeOut();

    };

    return function() {
        renderer.domElement.addEventListener( 'mousedown', handleMouseDown );
        renderer.domElement.addEventListener( 'mousemove', handleMouseMove );
        renderer.domElement.addEventListener( 'mouseup', handleMouseUp );
    };
})();







function render() {

    if(Viensla.bottlecaps.position.y <= Viensla.bottle.position.y){
        Viensla.generateCaps();
        Player.score++;
        $plpart.find('.score').text(Player.score);

        if(!Sounds.mute) Sounds.pschit2.play();
    }

    if(Player.bottlecaps.position.y <= Player.bottle.position.y){
        Player.generateCaps();
        Viensla.score++;
        $vlpart.find('.score').text(Viensla.score);

        if(!Sounds.mute) Sounds.pschit2.play();
    }

    camera.lookAt(lookatobj.position);

    spotCreator.draw();


    var time = Date.now() * 0.0005;

//    animateFloatingLights(time);

    pointLight.position.x = Math.sin( time ) * 3000;
    pointLight.position.y = 600;
    pointLight.position.z = Math.cos( time ) * 3000;


    renderer.render(scene, camera);
    requestAnimationFrame(render);


}



capCollision = function ( collided, linearVelocity, angularVelocity, other ){
    this.collisions++;

    if(this.floating) return;

    console.log(other);

    var collision = collided.name;


    console.log(collision+' Hit !');

    switch(collision){
        case 'level':
            if(!Sounds.mute) Sounds.simpletap2.play();
            break;
        case 'tapis':
            if(!Sounds.mute) Sounds.simpletap1.play();
            break;
        case 'floor':
            if(!Sounds.mute) Sounds.simpletap3.play();
            break;
        case 'vlCap':
            if(!Sounds.mute) Sounds.capcap.play();

//            var LinearVelo = collided.getLinearFactor();
            var forceCollided = ( Math.abs(linearVelocity.x)+Math.abs(linearVelocity.y)+Math.abs(linearVelocity.z) +  Math.abs(angularVelocity.x)+Math.abs(angularVelocity.y)+Math.abs(angularVelocity.z) ) * 1000;

            console.log(forceCollided);

            break;
        case 'plCap':
            if(!Sounds.mute) Sounds.pschit1.play();
            break;
        case 'vlBottle':
            if(!Sounds.mute) Sounds.clink.play();
            break;
        case 'plBottle':
            if(!Sounds.mute) Sounds.pschit1.play();
            break;
        case '':
            console.log('Unamed hit !');
            break;
    }


    if(collision == 'vlCap'){
        spotCreator.obj = collided;
        collided.__dirtyPosition = true;
//        spotCreator.create();

    }



};


var discTopVector =  new THREE.Vector3(1,20,1);

var spotCreator = {
    obj : null,
    els : [],
    nbDisc : 0,
    create : function(){
        discParticules = new THREE.PointCloud( discGeo, discMat );
    },
    draw : function(){

        if(!this.obj) return;
//
//        if(spotCreator.nbDisc%2 == 0) {
//            this.nbDisc++;
//            return;
//        }

        if(spotCreator.nbDisc > 80){
            spotCreator.obj = null;
            spotCreator.nbDisc = 0;
            spotCreator.els = [];
            return;
        }

        var disc = new Physijs.BoxMesh(
            new THREE.SphereGeometry( Math.random(), 5, 16 ),
            discMat
        );

        disc.position.x = Viensla.bottle.position.x;
        disc.position.y = Player.bottle.position.y + 20;
        disc.position.z = Viensla.bottle.position.z;
//        disc.position.x = spotCreator.obj.position.x;
//        disc.position.y = spotCreator.obj.position.y;
//        disc.position.z = spotCreator.obj.position.z;

//        disc.__dirtyPosition = true;

        discTopVector.set(Math.random()*10, Math.random()*40, Math.random()*10);

        setTimeout(function(){
//            scene.remove(disc);
        }, 5000);

//        scene.add(disc);

        disc.setLinearVelocity(discTopVector);


        this.nbDisc++;


    }
};


var power = 0,
    speedbar = 2,
    powerDir = speedbar,
    strengh = 6;


function setPower(){
    power += powerDir;

    if(power > 100){
        powerDir = -speedbar;
    }

    if(power < 0){
        powerDir = +speedbar;
    }

    $('.powerbar .bar').height(power+'%');
}



$(document).ready(function(){
    loadBottleTools();

    window.addEventListener( 'resize', onWindowResize, false );

    $('#party').click(function(){
        Party.create();
    });

    $('#mute').click(function(){
        Sounds.mute = !Sounds.mute;
    });

});



function onWindowResize( event ) {

    renderer.setSize( window.innerWidth, window.innerHeight );

    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();

}