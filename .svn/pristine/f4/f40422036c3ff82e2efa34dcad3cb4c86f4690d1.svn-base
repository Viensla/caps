/* Modernizr 2.6.2 (Custom Build) | MIT & BSD
 * Build: http://modernizr.com/download/#-cssanimations-csstransitions-touch-shiv-cssclasses-prefixed-teststyles-testprop-testallprops-prefixes-domprefixes-load
 */
;window.Modernizr=function(a,b,c){function z(a){j.cssText=a}function A(a,b){return z(m.join(a+";")+(b||""))}function B(a,b){return typeof a===b}function C(a,b){return!!~(""+a).indexOf(b)}function D(a,b){for(var d in a){var e=a[d];if(!C(e,"-")&&j[e]!==c)return b=="pfx"?e:!0}return!1}function E(a,b,d){for(var e in a){var f=b[a[e]];if(f!==c)return d===!1?a[e]:B(f,"function")?f.bind(d||b):f}return!1}function F(a,b,c){var d=a.charAt(0).toUpperCase()+a.slice(1),e=(a+" "+o.join(d+" ")+d).split(" ");return B(b,"string")||B(b,"undefined")?D(e,b):(e=(a+" "+p.join(d+" ")+d).split(" "),E(e,b,c))}var d="2.6.2",e={},f=!0,g=b.documentElement,h="modernizr",i=b.createElement(h),j=i.style,k,l={}.toString,m=" -webkit- -moz- -o- -ms- ".split(" "),n="Webkit Moz O ms",o=n.split(" "),p=n.toLowerCase().split(" "),q={},r={},s={},t=[],u=t.slice,v,w=function(a,c,d,e){var f,i,j,k,l=b.createElement("div"),m=b.body,n=m||b.createElement("body");if(parseInt(d,10))while(d--)j=b.createElement("div"),j.id=e?e[d]:h+(d+1),l.appendChild(j);return f=["&#173;",'<style id="s',h,'">',a,"</style>"].join(""),l.id=h,(m?l:n).innerHTML+=f,n.appendChild(l),m||(n.style.background="",n.style.overflow="hidden",k=g.style.overflow,g.style.overflow="hidden",g.appendChild(n)),i=c(l,a),m?l.parentNode.removeChild(l):(n.parentNode.removeChild(n),g.style.overflow=k),!!i},x={}.hasOwnProperty,y;!B(x,"undefined")&&!B(x.call,"undefined")?y=function(a,b){return x.call(a,b)}:y=function(a,b){return b in a&&B(a.constructor.prototype[b],"undefined")},Function.prototype.bind||(Function.prototype.bind=function(b){var c=this;if(typeof c!="function")throw new TypeError;var d=u.call(arguments,1),e=function(){if(this instanceof e){var a=function(){};a.prototype=c.prototype;var f=new a,g=c.apply(f,d.concat(u.call(arguments)));return Object(g)===g?g:f}return c.apply(b,d.concat(u.call(arguments)))};return e}),q.touch=function(){var c;return"ontouchstart"in a||a.DocumentTouch&&b instanceof DocumentTouch?c=!0:w(["@media (",m.join("touch-enabled),("),h,")","{#modernizr{top:9px;position:absolute}}"].join(""),function(a){c=a.offsetTop===9}),c},q.cssanimations=function(){return F("animationName")},q.csstransitions=function(){return F("transition")};for(var G in q)y(q,G)&&(v=G.toLowerCase(),e[v]=q[G](),t.push((e[v]?"":"no-")+v));return e.addTest=function(a,b){if(typeof a=="object")for(var d in a)y(a,d)&&e.addTest(d,a[d]);else{a=a.toLowerCase();if(e[a]!==c)return e;b=typeof b=="function"?b():b,typeof f!="undefined"&&f&&(g.className+=" "+(b?"":"no-")+a),e[a]=b}return e},z(""),i=k=null,function(a,b){function k(a,b){var c=a.createElement("p"),d=a.getElementsByTagName("head")[0]||a.documentElement;return c.innerHTML="x<style>"+b+"</style>",d.insertBefore(c.lastChild,d.firstChild)}function l(){var a=r.elements;return typeof a=="string"?a.split(" "):a}function m(a){var b=i[a[g]];return b||(b={},h++,a[g]=h,i[h]=b),b}function n(a,c,f){c||(c=b);if(j)return c.createElement(a);f||(f=m(c));var g;return f.cache[a]?g=f.cache[a].cloneNode():e.test(a)?g=(f.cache[a]=f.createElem(a)).cloneNode():g=f.createElem(a),g.canHaveChildren&&!d.test(a)?f.frag.appendChild(g):g}function o(a,c){a||(a=b);if(j)return a.createDocumentFragment();c=c||m(a);var d=c.frag.cloneNode(),e=0,f=l(),g=f.length;for(;e<g;e++)d.createElement(f[e]);return d}function p(a,b){b.cache||(b.cache={},b.createElem=a.createElement,b.createFrag=a.createDocumentFragment,b.frag=b.createFrag()),a.createElement=function(c){return r.shivMethods?n(c,a,b):b.createElem(c)},a.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+l().join().replace(/\w+/g,function(a){return b.createElem(a),b.frag.createElement(a),'c("'+a+'")'})+");return n}")(r,b.frag)}function q(a){a||(a=b);var c=m(a);return r.shivCSS&&!f&&!c.hasCSS&&(c.hasCSS=!!k(a,"article,aside,figcaption,figure,footer,header,hgroup,nav,section{display:block}mark{background:#FF0;color:#000}")),j||p(a,c),a}var c=a.html5||{},d=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,e=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,f,g="_html5shiv",h=0,i={},j;(function(){try{var a=b.createElement("a");a.innerHTML="<xyz></xyz>",f="hidden"in a,j=a.childNodes.length==1||function(){b.createElement("a");var a=b.createDocumentFragment();return typeof a.cloneNode=="undefined"||typeof a.createDocumentFragment=="undefined"||typeof a.createElement=="undefined"}()}catch(c){f=!0,j=!0}})();var r={elements:c.elements||"abbr article aside audio bdi canvas data datalist details figcaption figure footer header hgroup mark meter nav output progress section summary time video",shivCSS:c.shivCSS!==!1,supportsUnknownElements:j,shivMethods:c.shivMethods!==!1,type:"default",shivDocument:q,createElement:n,createDocumentFragment:o};a.html5=r,q(b)}(this,b),e._version=d,e._prefixes=m,e._domPrefixes=p,e._cssomPrefixes=o,e.testProp=function(a){return D([a])},e.testAllProps=F,e.testStyles=w,e.prefixed=function(a,b,c){return b?F(a,b,c):F(a,"pfx")},g.className=g.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+(f?" js "+t.join(" "):""),e}(this,this.document),function(a,b,c){function d(a){return"[object Function]"==o.call(a)}function e(a){return"string"==typeof a}function f(){}function g(a){return!a||"loaded"==a||"complete"==a||"uninitialized"==a}function h(){var a=p.shift();q=1,a?a.t?m(function(){("c"==a.t?B.injectCss:B.injectJs)(a.s,0,a.a,a.x,a.e,1)},0):(a(),h()):q=0}function i(a,c,d,e,f,i,j){function k(b){if(!o&&g(l.readyState)&&(u.r=o=1,!q&&h(),l.onload=l.onreadystatechange=null,b)){"img"!=a&&m(function(){t.removeChild(l)},50);for(var d in y[c])y[c].hasOwnProperty(d)&&y[c][d].onload()}}var j=j||B.errorTimeout,l=b.createElement(a),o=0,r=0,u={t:d,s:c,e:f,a:i,x:j};1===y[c]&&(r=1,y[c]=[]),"object"==a?l.data=c:(l.src=c,l.type=a),l.width=l.height="0",l.onerror=l.onload=l.onreadystatechange=function(){k.call(this,r)},p.splice(e,0,u),"img"!=a&&(r||2===y[c]?(t.insertBefore(l,s?null:n),m(k,j)):y[c].push(l))}function j(a,b,c,d,f){return q=0,b=b||"j",e(a)?i("c"==b?v:u,a,b,this.i++,c,d,f):(p.splice(this.i++,0,a),1==p.length&&h()),this}function k(){var a=B;return a.loader={load:j,i:0},a}var l=b.documentElement,m=a.setTimeout,n=b.getElementsByTagName("script")[0],o={}.toString,p=[],q=0,r="MozAppearance"in l.style,s=r&&!!b.createRange().compareNode,t=s?l:n.parentNode,l=a.opera&&"[object Opera]"==o.call(a.opera),l=!!b.attachEvent&&!l,u=r?"object":l?"script":"img",v=l?"script":u,w=Array.isArray||function(a){return"[object Array]"==o.call(a)},x=[],y={},z={timeout:function(a,b){return b.length&&(a.timeout=b[0]),a}},A,B;B=function(a){function b(a){var a=a.split("!"),b=x.length,c=a.pop(),d=a.length,c={url:c,origUrl:c,prefixes:a},e,f,g;for(f=0;f<d;f++)g=a[f].split("="),(e=z[g.shift()])&&(c=e(c,g));for(f=0;f<b;f++)c=x[f](c);return c}function g(a,e,f,g,h){var i=b(a),j=i.autoCallback;i.url.split(".").pop().split("?").shift(),i.bypass||(e&&(e=d(e)?e:e[a]||e[g]||e[a.split("/").pop().split("?")[0]]),i.instead?i.instead(a,e,f,g,h):(y[i.url]?i.noexec=!0:y[i.url]=1,f.load(i.url,i.forceCSS||!i.forceJS&&"css"==i.url.split(".").pop().split("?").shift()?"c":c,i.noexec,i.attrs,i.timeout),(d(e)||d(j))&&f.load(function(){k(),e&&e(i.origUrl,h,g),j&&j(i.origUrl,h,g),y[i.url]=2})))}function h(a,b){function c(a,c){if(a){if(e(a))c||(j=function(){var a=[].slice.call(arguments);k.apply(this,a),l()}),g(a,j,b,0,h);else if(Object(a)===a)for(n in m=function(){var b=0,c;for(c in a)a.hasOwnProperty(c)&&b++;return b}(),a)a.hasOwnProperty(n)&&(!c&&!--m&&(d(j)?j=function(){var a=[].slice.call(arguments);k.apply(this,a),l()}:j[n]=function(a){return function(){var b=[].slice.call(arguments);a&&a.apply(this,b),l()}}(k[n])),g(a[n],j,b,n,h))}else!c&&l()}var h=!!a.test,i=a.load||a.both,j=a.callback||f,k=j,l=a.complete||f,m,n;c(h?a.yep:a.nope,!!i),i&&c(i)}var i,j,l=this.yepnope.loader;if(e(a))g(a,0,l,0);else if(w(a))for(i=0;i<a.length;i++)j=a[i],e(j)?g(j,0,l,0):w(j)?B(j):Object(j)===j&&h(j,l);else Object(a)===a&&h(a,l)},B.addPrefix=function(a,b){z[a]=b},B.addFilter=function(a){x.push(a)},B.errorTimeout=1e4,null==b.readyState&&b.addEventListener&&(b.readyState="loading",b.addEventListener("DOMContentLoaded",A=function(){b.removeEventListener("DOMContentLoaded",A,0),b.readyState="complete"},0)),a.yepnope=k(),a.yepnope.executeStack=h,a.yepnope.injectJs=function(a,c,d,e,i,j){var k=b.createElement("script"),l,o,e=e||B.errorTimeout;k.src=a;for(o in d)k.setAttribute(o,d[o]);c=j?h:c||f,k.onreadystatechange=k.onload=function(){!l&&g(k.readyState)&&(l=1,c(),k.onload=k.onreadystatechange=null)},m(function(){l||(l=1,c(1))},e),i?k.onload():n.parentNode.insertBefore(k,n)},a.yepnope.injectCss=function(a,c,d,e,g,i){var e=b.createElement("link"),j,c=i?h:c||f;e.href=a,e.rel="stylesheet",e.type="text/css";for(j in d)e.setAttribute(j,d[j]);g||(n.parentNode.insertBefore(e,n),m(c,0))}}(this,document),Modernizr.load=function(){yepnope.apply(window,[].slice.call(arguments,0))};

var BD = {
    init: function () {
        var info = this.searchString(this.dataBrowser) || {identity:"unknown"}
        this.browser = info.identity;
        this.version = this.searchVersion(navigator.userAgent)
            || this.searchVersion(navigator.appVersion)
            || "an unknown version";
        this.platformInfo = this.searchString(this.dataPlatform) || this.dataPlatform["unknown"];
        this.platform = this.platformInfo.identity;
        var browserInfo = this.urls[this.browser];
        if (!browserInfo) {
            browserInfo = this.urls["unknown"];
        } else if (browserInfo.platforms) {
            var info = browserInfo.platforms[this.platform];
            if (info) {
                browserInfo = info;
            }
        }
        this.urls = browserInfo;
    },
    searchString: function (data) {
        for (var i = 0; i < data.length; i++){
            var info = data[i];
            var dataString = info.string;
            var dataProp = info.prop;
            this.versionSearchString = info.versionSearch || info.identity;
            if (dataString) {
                if (dataString.indexOf(info.subString) != -1) {
                    var shouldExclude = false;
                    if (info.excludeSubstrings) {
                        for (var ii = 0; ii < info.excludeSubstrings.length; ++ii) {
                            if (dataString.indexOf(info.excludeSubstrings[ii]) != -1) {
                                shouldExclude = true;
                                break;
                            }
                        }
                    }
                    if (!shouldExclude)
                        return info;
                }
            } else if (dataProp) {
                return info;
            }
        }
    },
    searchVersion: function (dataString) {
        var index = dataString.indexOf(this.versionSearchString);
        if (index == -1) {
            return;
        }
        return parseFloat(dataString.substring(
            index + this.versionSearchString.length + 1));
    },
    dataBrowser: [
        { string: navigator.userAgent,
            subString: "Chrome",
            excludeSubstrings: ["OPR/"],
            identity: "Chrome"
        },
        { string: navigator.userAgent,
            subString: "OmniWeb",
            versionSearch: "OmniWeb/",
            identity: "OmniWeb"
        },
        { string: navigator.vendor,
            subString: "Apple",
            identity: "Safari",
            versionSearch: "Version"
        },
        { string: navigator.vendor,
            subString: "Opera",
            identity: "Opera"
        },
        { string: navigator.userAgent,
            subString: "Android",
            identity: "Android"
        },
        { string: navigator.vendor,
            subString: "iCab",
            identity: "iCab"
        },
        { string: navigator.vendor,
            subString: "KDE",
            identity: "Konqueror"
        },
        { string: navigator.userAgent,
            subString: "Firefox",
            identity: "Firefox"
        },
        { string: navigator.vendor,
            subString: "Camino",
            identity: "Camino"
        },
        {// for newer Netscapes (6+)
            string: navigator.userAgent,
            subString: "Netscape",
            identity: "Netscape"
        },
        { string: navigator.userAgent,
            subString: "MSIE",
            identity: "Explorer",
            versionSearch: "MSIE"
        },
        { // for IE11+
            string: navigator.userAgent,
            subString: "Trident",
            identity: "Explorer",
            versionSearch: "rv"
        },
        { string: navigator.userAgent,
            subString: "Gecko",
            identity: "Mozilla",
            versionSearch: "rv"
        },
        { // for older Netscapes (4-)
            string: navigator.userAgent,
            subString: "Mozilla",
            identity: "Netscape",
            versionSearch: "Mozilla"
        }
    ],
    dataPlatform: [
        { string: navigator.platform,
            subString: "Win",
            identity: "Windows",
            browsers: [
                {url: "http://www.mozilla.com/en-US/firefox/new/", name: "Mozilla Firefox"},
                {url: "http://www.opera.com/", name: "Opera"},
                {url: "http://www.google.com/chrome/", name: "Google Chrome"},
                {url: "http://www.microsoft.com/ie", name: "Internet Explorer"}
            ]
        },
        { string: navigator.platform,
            subString: "Mac",
            identity: "Mac",
            browsers: [
                {url: "http://www.mozilla.com/en-US/firefox/new/", name: "Mozilla Firefox"},
                {url: "http://www.google.com/chrome/", name: "Google Chrome"},
                {url: "http://www.opera.com/", name: "Opera"},
                {url: "http://www.webkit.org/", name: "WebKit Developer Builds"}
            ]
        },
        { string: navigator.userAgent,
            subString: "iPhone",
            identity: "iPhone/iPod",
            browsers: [
                {url: "http://www.mozilla.com/en-US/firefox/new/", name: "Mozilla Firefox"}
            ]
        },
        { string: navigator.platform,
            subString: "iPad",
            identity: "iPad",
            browsers: [
                {url: "http://www.mozilla.com/en-US/firefox/new/", name: "Mozilla Firefox"}
            ]
        },
        { string: navigator.userAgent,
            subString: "Android",
            identity: "Android",
            browsers: [
                {url: "https://market.android.com/details?id=org.mozilla.firefox", name: "Mozilla Firefox"},
                {url: "https://market.android.com/details?id=com.opera.browser", name: "Opera Mobile"}
            ]
        },
        { string: navigator.platform,
            subString: "Linux",
            identity: "Linux",
            browsers: [
                {url: "http://www.mozilla.com/en-US/firefox/new/", name: "Mozilla Firefox"},
                {url: "http://www.google.com/chrome/", name: "Google Chrome"},
                {url: "http://www.opera.com/", name: "Opera"}
            ]
        },
        { string: "unknown",
            subString: "unknown",
            identity: "unknown",
            browsers: [
                {url: "http://www.mozilla.com/en-US/firefox/new/", name: "Mozilla Firefox"},
                {url: "http://www.google.com/chrome/", name: "Google Chrome"},
                {url: "http://www.opera.com/", name: "Opera"},
                {url: "http://www.webkit.org/", name: "WebKit Developer Builds"}
            ]
        }
    ],
    /*
     upgradeUrl:         Tell the user how to upgrade their browser.
     troubleshootingUrl: Help the user.
     platforms:          Urls by platform. See dataPlatform.identity for valid platform names.
     */
    urls: {
        "Chrome": {
            upgradeUrl: "http://www.google.com/support/chrome/bin/answer.py?answer=95346",
            troubleshootingUrl: "http://www.google.com/support/chrome/bin/answer.py?answer=1220892"
        },
        "Firefox": {
            upgradeUrl: "http://www.mozilla.com/en-US/firefox/new/",
            troubleshootingUrl: "https://support.mozilla.com/en-US/kb/how-do-i-upgrade-my-graphics-drivers"
        },
        "Opera": {
            platforms: {
                "Android": {
                    upgradeUrl: "https://market.android.com/details?id=com.opera.browser",
                    troubleshootingUrl: "http://www.opera.com/support/"
                }
            },
            upgradeUrl: "http://www.opera.com/",
            troubleshootingUrl: "http://www.opera.com/support/"
        },
        "Android": {
            upgradeUrl: null,
            troubleshootingUrl: null
        },
        "Safari": {
            platforms: {
                "iPhone/iPod": {
                    upgradeUrl: "http://www.apple.com/ios/",
                    troubleshootingUrl: "http://www.apple.com/support/iphone/"
                },
                "iPad": {
                    upgradeUrl: "http://www.apple.com/ios/",
                    troubleshootingUrl: "http://www.apple.com/support/ipad/"
                },
                "Mac": {
                    upgradeUrl: "http://www.webkit.org/",
                    troubleshootingUrl: "http://www.webkit.org/blog/919/webgl-draft-specification-now-available/"
                }
            },
            upgradeUrl: "http://www.webkit.org/",
            troubleshootingUrl: "http://www.webkit.org/blog/919/webgl-draft-specification-now-available/"
        },
        "Explorer": {
            upgradeUrl: "http://www.microsoft.com/ie",
            troubleshootingUrl: "http://msdn.microsoft.com/en-us/library/ie/bg182648(v=vs.85).aspx"
        },
        "unknown": {
            upgradeUrl: null,
            troubleshootingUrl: null
        }
    }
};

$(function(){








    var socket = io.connect();
    var canvas, ctx;
    var Game;
    var $plpart, $vlpart;
    var CreateMutliplayerParty;

    initializeParty = function(){

        var IO = {

            init: function() {
                IO.socket = socket;
                IO.bindEvents();
            },

            bindEvents : function() {
                IO.socket.on('connected', IO.onConnection);
                IO.socket.on('newGameCreated', IO.onNewGameCreated );
                IO.socket.on('playerJoinedRoom', IO.playerJoinedRoom );
                IO.socket.on('createNewPlayer', IO.createNewPlayer);
                IO.socket.on('startParty', IO.onStartParty);
                IO.socket.on('hostReady', Game.Player.hostReady);

                IO.socket.on('playerUpdateMove', Game.Host.playerUpdateMove);
                IO.socket.on('playerUpdateLaunch', Game.Host.playerUpdateLaunch);
                IO.socket.on('getEnemyInfo', Game.Host.showEnemy);
                IO.socket.on('enemyChooseBottle', Game.Host.enemyChooseBottle);

                IO.socket.on('enemyCaps', Game.Host.enemyCaps);
                IO.socket.on('enemyMessage', Game.Host.enemyMessage);

                IO.socket.on('playerAskReset', Game.Host.playerAskReset);
                IO.socket.on('playerAskQuit', Game.Host.playerAskQuit);

                IO.socket.on('getHostInfo', Game.Player.getHostInfo);
                //Display errors
                IO.socket.on('error', IO.error );
            },


            onConnection : function(data) {
                Game.socketId = IO.socket.socket.sessionid;
            },

            onNewGameCreated : function(data){
                Game.Host.gameInit(data);
            },

            playerJoinedRoom : function(data) {
                Game[Game.role].updateWaitingScreen(data);
            },

            createNewPlayer : function(data){
//            console.log(data);
            },

            onStartParty: function(data){
                Game[Game.role].showPartyScreen(data);
            },

            error : function(data) {
                alert(data.message);
            }
        };

        Game = {
            gameId : 0,
            role : '',
            socketId : '',
            partyOn: false,
            nbPlayers: 0,
            hostReady: false,
            init : function(){
                Game.cacheScreens();
                Game.bindEvents();
                Game.showIntroTpl();
            },

            bindEvents: function () {
                // Host
//            Game.$doc.on('click', '#btnCreateGame', Game.Host.onCreateClick);
//            Game.$doc.on('click', '#btnStartParty',Game.Host.onStartPartyClick);

                // Player
//            Game.$doc.on('click', '#btnJoinGame', Game.Player.onJoinClick);
//            Game.$doc.on('click', '#btnStart',Game.Player.onPlayerStartClick);

            },

            cacheScreens : function(){
                Game.$doc = $(document);

                // Templates
                Game.$area = $('#game-area');
                Game.$tplIntroScreen = $('#intro-screen-template').html();
                Game.$tplNewGame = $('#new-game-screen-template').html();
                Game.$tplJoinGame = $('#join-game-template').html();
                Game.$tplGamerScreen = $('#gamer-screen-template').html();
                Game.$tplPartyScreen = $('#party-screen-template').html();
            },
            showIntroTpl : function(){
//            Game.$area.html(Game.$tplIntroScreen);
//            console.log('Intro screen displayed');
            },




            // HOST -------------------------------------------------------------------------------------------------------------------

            Host : {
                players : [],
                numPlayersInRoom : 0,
                resetPlayer : 0,
                onCreateClick: function () {
                    IO.socket.emit('hostCreateNewGame');
                },

                gameInit: function (data) {
                    Game.gameId = data.gameId;
                    Game.socketId = data.socketId;
                    Game.Player.socketId = data.socketId;

                    Game.role = 'Host';
                    Game.Host.numPlayersInRoom = 0;
                    Game.Host.displayNewGameScreen();
                },

                displayNewGameScreen : function() {
                    // Fill the game screen
//                Game.$area.html(Game.$tplNewGame);

                    // Show the gameId on screen
                    $('#room-code').val(Game.gameId);

                    // Display the URL on screen
                    $('#room-code-lk').val(window.location.href+'#'+Game.gameId);
                    $('.wait-section .wt-party-code').addClass('act').find('span').text(Game.gameId);

                    $('#host-part').addClass('rdy');

                    $('#multiplayer').addClass('hosting');
//                Game.$area.append(Game.$tplJoinGame);
//                $('#inputGameId').attr('value',Game.gameId).prop('type', 'hidden');
                },

                updateWaitingScreen: function(data) {
                    // Update host screen
                    $('#playersWaiting').append('<p>Player ' + data.playerName + ' joined the game.</p>');
                    // Store the new player's data on the Host.
                    Game.Host.players.push(data);

                    // Increment the number of players in the room
                    Game.Host.numPlayersInRoom += 1;

                    Game.hostReady = true;

                    if (Game.Host.numPlayersInRoom > 1) {

                        if(Interface.curIndex < 3){
                            Interface.navigate(3);
                        }
                        IO.socket.emit('hostRoomReady', {gameId : Game.gameId, hostReady: Game.hostReady});
//                    IO.socket.emit('playerJoinGame', {gameId : Game.gameId, hostReady: Game.hostReady, socketId:null});

                    }
                },

                onStartPartyClick: function(){
                    IO.socket.emit('hostStartParty', {gameId : Game.gameId, socketId: Game.Player.socketId,  hostPlayer : Game.Host.players});
                },
                showPartyScreen: function(){
//                var i = 0;

//                Game.partyOn = true;
//                CAPS.launchGame();

//                IO.socket.emit('hostSendInfo', {gameId : Game.gameId, name : Game.Player.name, playerID:Game.socketId});
                },
                sendPlayerInfo : function(){
                    Game.Player.name = $('#input-player-name').val() || 'Anonymous';
                    var data = {
                        gameId : Game.gameId,
                        name : Game.Player.name,
                        caps : Game.Player.caps,
                        playerID:Game.socketId
                    };
                    IO.socket.emit('hostSendInfo', data);

                    Game.Player.ready = true;

                    $('.wait-section .wt-party-code').removeClass('act');

                    if(Game.Enemy.ready)
                        Interface.navigate(6);
                    else
                        Interface.navigate(5);
                },
                showEnemy:function(data){
                    if(Game.role == 'Host' && Game.Player.socketId != data.playerID){
                        Game.Enemy.name = data.name;
                        Game.Enemy.id = data.playerID;
//                    $plpart.find('h3').text(Game.Player.name);
//                    $vlpart.find('h3').text(Game.Enemy.name);

                    }
                },

                //GAMING

                playerUpdateMove:function(data){
                    if(data.playerID == Game.Enemy.id){
                        Viensla.livePos.x = -data.pos.x;
                        Viensla.livePos.y = data.pos.y;
                        Viensla.livePos.z = data.pos.z;
                        Viensla.liveVector = new THREE.Vector3(Viensla.livePos.x,Viensla.livePos.y, Viensla.livePos.z);
                    }
                },

                playerUpdateLaunch:function(data){
                    if(data.playerID == Game.Enemy.id){
                        Viensla.livePos.x = -data.shot.x;
                        Viensla.livePos.y = data.shot.y;
                        Viensla.livePos.z = data.shot.z;
                        Viensla.liveVector = new THREE.Vector3(Viensla.livePos.x,Viensla.livePos.y, Viensla.livePos.z);
                        Viensla.shootCaps(data.shot);
                    }
                },
                enemyChooseBottle : function(data){
                    if(data.playerID == Game.Enemy.id){
                        Viensla.changeBottle(data.bottle);
                    }
                },
                enemyCaps : function(data){
                    if(data.playerID == Game.Enemy.id){
                        Player.drink();
                    }
                },
                enemyMessage : function(data){
                    if(data.playerID == Game.Enemy.id){
                        Interface.textoBox.showTexto(data.im);
                    }
                },
                playerAskReset: function(data){
                    Game.Host.resetPlayer++;


                    if(Game.Host.resetPlayer > 1){
                        Game.Host.resetPlayer = 0;
                        Party.resetParty();
                    }else{
                        if(data.playerID == Game.Enemy.id)
                            TweenMax.to($('#reset-party-c h4.again'), 0.4, {scale:1, opacity:1, height:30, lineHeight:'30px'});
                    }
                },
                playerAskQuit: function(data){
                    if(data.playerID == Game.Enemy.id){
                        TweenMax.to($('#reset-party-c h4.quit'), 0.4, {scale:1, opacity:1, height:30, lineHeight:'30px'});
                        TweenMax.to($('#reset-party-c #bt-reset-party'), 0.4, {scale:0, opacity:0});
                        TweenMax.to($('#reset-party-c #bt-quit-reset'), 0.4, {y: -120});
                    }

                }
            },
            // PlAYERS -------------------------------------------------------------------------------------------------------------------

            Player : {
                hostSocketId: '',
                name: '',
                socketId : '',
                caps : 'ptp',
                ready:false,
                onJoinClick: function () {
                    // Display the Join Game HTML on the player's screen.
                    Game.$area.html(Game.$tplJoinGame);
                },
                onPlayerStartClick: function() {
                    // collect data to send to the server
                    var data = {
                        gameId : Game.role == 'Host' ? Game.gameId : ($('#join-code').val()),
                        playerName : Game.role == 'Host' ? 'Host' : 'Player',
                        x: 0,
                        y: 0
                    };

                    Interface.hdr.hideBt();
                    CAPS.solo = false;

                    // Set the appropriate properties for the current player.
                    if(Game.role == 'Host'){
                        if(Game.Host.numPlayersInRoom == 1) {
                            Interface.navigate(3);
                        }else{
                            Interface.navigate(2);
                        }
                    }else{
                        Game.role = 'Player';
                    }

                    IO.socket.emit('playerJoinGame', data);

//                Game.Player.name = data.playerName;

                },

                updateWaitingScreen : function(data) {
                    if(IO.socket.socket.sessionid === data.socketId){
                        Game.role = 'Player';
                        Game.gameId = data.gameId;
                        Game.Player.socketId = data.socketId;
                        $('#playerWaitingMessage').text('Joined Game ' + data.gameId + '. Please wait for game to begin.');

                        if(data.hostReady && Interface.curIndex < 3){
                            Interface.navigate(3);
                        }else{
                            Interface.navigate(2);
                        }
                    }else if(data.hostReady && Interface.curIndex < 3){
                        Interface.navigate(3);
                    }
                },
                hostReady : function(data){
                    if(IO.socket.socket.sessionid != data.socketId){
                        Game.Player.updateWaitingScreen({hostReady: true, socketId : null});
                    }
                },
                showPartyScreen: function(data){

//
//                var i = 0;
//                Game.$area.html(Game.$tplPartyScreen);
//                Game.partyOn = true;
//                Game.Host.players = data.hostPlayer;
//                Game.$area.html($('#caps-game'));
//
//                CAPS.launchGame();

                },
                getHostInfo:function(data){
                    if(Game.Player.socketId != data.playerID){
                        Game.Enemy.name = data.name;
                        Game.Enemy.id = data.playerID;
                        Game.Enemy.caps = data.caps;

                        Game.Enemy.ready = true;

                        if(Game.Player.ready)
                            Interface.navigate(6);

                    }
                },

                sendPlayerInfo : function(){
                    var data = {
                        gameId : Game.gameId,
                        name : Game.Player.name,
                        caps : Game.Player.caps,
                        playerID:Game.Player.socketId
                    };

                    IO.socket.emit('hostSendInfo', data);

                    Game.Player.ready = true;

                    if(Game.Enemy.ready)
                        Interface.navigate(6);
                    else
                        Interface.navigate(5);
                },

                playerMoving : function(data){
                    IO.socket.emit('playerMove', {
                        playerName: Game.Player.name,
                        playerID:Game.Player.socketId,
                        gameId: Game.gameId,
                        pos:data
                    });
                },
                playerLaunch : function(data){
                    IO.socket.emit('playerShoot', {
                        playerName: Game.Player.name,
                        playerID:Game.Player.socketId,
                        gameId: Game.gameId,
                        shot:data
                    });
                },
                playerChooseBottle : function(bottle){
                    IO.socket.emit('playerChooseBottle', {
                        gameId: Game.gameId,
                        playerID:Game.Player.socketId,
                        bottle: bottle
                    });
                },
                playerCaps : function(){
                    IO.socket.emit('playerCaps', {
                        gameId: Game.gameId,
                        playerID:Game.Player.socketId
                    });
                },
                playerMessage : function(i){
                    IO.socket.emit('playerMessage', {
                        gameId: Game.gameId,
                        playerID:Game.Player.socketId,
                        im:i
                    });
                },
                playerReset : function(){
                    IO.socket.emit('playerReset', {
                        gameId: Game.gameId,
                        playerID:Game.Player.socketId
                    });
                },
                playerQuit : function(){
                    IO.socket.emit('playerQuit', {
                        gameId: Game.gameId,
                        playerID:Game.Player.socketId
                    });
                }
            },
            Enemy : {
                id:null,
                name :'PayeTaPinte',
                caps :'ptp',
                ready : false
            }
        };

        IO.init();
        Game.init();
    };



    var Player = {
        score : 0,
        launched : 0,
        isPlaying : true,
        totalLaunched : 0,
        lives : 0,
        drunked : 1,
        capmat : null,
        stickermat : null,
        outline : '',
        pos : {x:0, y:50, z:112},
        sticker:null,
        initialize : function(){
            if(!this.capmat){
                this.capmat = caps_material.chimey.clone();
            }
            if(!this.stickermat){
                this.stickermat = new THREE.MeshBasicMaterial({map:THREE.ImageUtils.loadTexture('images/beers/stickers/chimais.png'),side:2, transparent:true,opacity:1});
            }
            var bottle_material = new THREE.MeshBasicMaterial( {  color:Player.capmat.materials[1].color, side:2 } )
            bottle_geo.buffersNeedUpdate = true;
            bottle_geo.uvsNeedUpdate = true;

            this.bottle = new Physijs.CylinderMesh(
                bottle_geo,
                bottle_material,
                0, {friction : 0.1, restitution : 0.1}
            );
            this.bottle.scale.set(10,12,10);
            this.bottle.castShadow = false;
            this.bottle.receiveShadow = true;
            this.bottle.name = 'plBottle';


            //Add Wall to level
            var transparent_side =  new THREE.MeshBasicMaterial({
                color:Player.capmat.materials[1].color,
                transparent:true,
                opacity:0
            });


            var sticker_materials = [
                transparent_side,
                transparent_side,
                transparent_side,
                transparent_side,
                Player.stickermat,
                transparent_side
            ];
            this.sticker = new Physijs.BoxMesh(
                new THREE.BoxGeometry(0.8, 1, 0.1),
                new THREE.MeshFaceMaterial(sticker_materials),
                0
            );
            this.sticker.position.x = 0;
            this.sticker.position.y = -0.3;
            this.sticker.position.z = 0.50;

            var bot_sh_mat = new THREE.MeshBasicMaterial({ color:shadowColors[Game.Player.caps],  side:2 });
            var sh_bottle = new Physijs.CylinderMesh(
                bottle_geo,
                bot_sh_mat,
                0, {friction : 0.1, restitution : 0.1}
            );
            sh_bottle.position.x = -0.03;
//        sh_bottle.position.y = -0.05;
            sh_bottle.position.z = 0.01;


            var neck = new Physijs.CylinderMesh(
                new THREE.CylinderGeometry(2, 2, 1, 6, 6 ),
                new THREE.MeshLambertMaterial({
                    color: 0xffffff,
                    transparent : true,
                    opacity:0
                })
                ,0);

            neck.position.x = 0;
            neck.position.y = tablefootSurfaceDim[1] +tablefootSurfaceDim[1]/2+45;
            neck.position.z = 110;

            scene.add(neck);

            Player.bottle.add(sh_bottle);
            Player.bottle.add(Player.sticker);

            Player.place({x:0, z:110});
            Player.generateBottle();

        },
        changeSticker:function(){
            var transparent_side =  new THREE.MeshBasicMaterial({
                transparent:true,
                opacity:0
            });
            var sticker_materials = [
                transparent_side,
                transparent_side,
                transparent_side,
                transparent_side,
                Player.stickermat,
                transparent_side
            ];
            this.sticker.material = new THREE.MeshFaceMaterial(sticker_materials);
        },
        place : function(axis){
            this.bottle.position.y = tablefootSurfaceDim[1] +tablefootSurfaceDim[1]/2+23;
            this.bottle.position.x = axis.x;
            this.bottle.position.z = axis.z;
        },
        generateBottle : function(){
            scene.add(Player.bottle);
        },
        generateCaps : function(){
            this.bottlecaps = new Physijs.CylinderMesh(geo_caps, Player.capmat, 0.3,  {friction : 0, restitution : 1});
            this.bottlecaps.castShadow = true;
            this.bottlecaps.receiveShadow = true;

            this.bottlecaps.scale.set(capModelscale,capModelscale,capModelscale);
            this.bottlecaps.rotation.x = Math.PI;

            this.bottlecaps.position.y = Player.bottle.position.y + 23;
            this.bottlecaps.position.x = Player.bottle.position.x;
            this.bottlecaps.position.z = Player.bottle.position.z;




            var sub = new Physijs.CylinderMesh(
                new THREE.CylinderGeometry(1.5, 1.5, 0, 32, 32 ),
                new THREE.MeshLambertMaterial({
                    color: Player.capmat.materials[1].color,
                    transparent : true,
                    opacity:1
                })
                ,0);

            sub.position.x = 0;
            sub.position.y = 0.3;
            sub.position.z = 0;

            var collisionSphere = new Physijs.CylinderMesh(
                new THREE.CylinderGeometry(3, 3, 1, 32, 32 ),
                new THREE.MeshLambertMaterial({
                    transparent : true,
                    opacity:0
                })
                ,0.1);
            this.bottlecaps.add(collisionSphere);


            this.bottlecaps.add(sub);
//        this.bottlecaps.add(neck);

            this.bottlecaps.name = 'plCap';
            this.bottlecaps.collided = false;

            scene.add(Player.bottlecaps);
        },

        drink : function(){
            Party.vlcaps();
        }

    }

    var perfectShoot = [
        {
            y : 130,
            x  : -2,
            pwr : 35
        },
        {
            y : 110,
            x  : -1,
            pwr : 75
        },
        {
            y : 130,
            x  : 2,
            pwr : 35
        },
        {
            y : 180,
            x  : -2,
            pwr : 21
        }
    ];


    var Viensla = {
        score : 0,
        launched : 0,
        totalLaunched : 0,
        isPerfect : false,
        imprecision : 16,
        isPlaying : false,
        isShooting : false,
        lives : 0,
        capmat : null,
        livePos : {x:0,y:0,z: -90},
        liveVector : null,
        initialize : function(){

            if(!this.capmat){
                this.capmat = caps_material.ptp.clone();
            }

            var bottle_material = Physijs.createMaterial(
                new THREE.MeshBasicMaterial( {  color: Viensla.capmat.materials[1].color,  shininess: 10,side:2 } )
            );

            this.bottle = new Physijs.CylinderMesh(
                bottle_geo,
                bottle_material,
                0, {friction : 0.1, restitution : 0.1}
            );
            this.bottle.scale.set(10,12,10);
            this.bottle.castShadow = false;
            this.bottle.receiveShadow = true;
            this.bottle.name = 'vlBottle';

            var neck = new Physijs.CylinderMesh(
                new THREE.CylinderGeometry(2, 2, 1, 6, 6 ),
                new THREE.MeshLambertMaterial({
                    color: 0xffffff,
                    transparent : true,
                    opacity:0
                })
                ,0);

            neck.position.x = 0;
            neck.position.y = tablefootSurfaceDim[1] +tablefootSurfaceDim[1]/2+45;
            neck.position.z = -110;

            scene.add(neck);


            Viensla.place({x:0, z:-110});
            Viensla.generateBottle();

//        Viensla.generateCursor();

        },
        place : function(axis){
            this.bottle.position.y = tablefootSurfaceDim[1] +tablefootSurfaceDim[1]/2+23;
            this.bottle.position.x = axis.x;
            this.bottle.position.z = axis.z;
        },
        generateBottle : function(){
            scene.add(Viensla.bottle);
//        Viensla.generateCaps();
        },
        generateCursor : function(){

            this.cursor = new THREE.Mesh(
                new THREE.SphereGeometry( 2, 32, 32 ),
                new THREE.MeshBasicMaterial( {  color: Viensla.capmat.materials[1].color,  shininess: 10,side:2 }));
            this.cursor.position.y = Viensla.livePos.y;
            this.cursor.position.x = Viensla.livePos.x;
            this.cursor.position.z = Viensla.livePos.z;

            scene.add(Viensla.cursor);
        },
        generateCaps : function(){

            this.bottlecaps = new Physijs.CylinderMesh(geo_caps, Viensla.capmat,  0.3, {friction : 0, restitution : 1});
            this.bottlecaps.castShadow = true;
            this.bottlecaps.receiveShadow = true;

            this.bottlecaps.scale.set(capModelscale,capModelscale,capModelscale);
            this.bottlecaps.rotation.x = Math.PI;

            this.bottlecaps.position.y = Viensla.bottle.position.y + 23;
            this.bottlecaps.position.x = Viensla.bottle.position.x;
            this.bottlecaps.position.z = Viensla.bottle.position.z;


            var neck = new Physijs.CylinderMesh(
                new THREE.CylinderGeometry(2, 2, 0.4, 10, 10 ),
                Physijs.createMaterial(
                    new THREE.MeshLambertMaterial({
                        color: 0xffffff,
                        transparent : true,
                        opacity:0
                    }))
                ,0);
            neck.position.x = 0;
            neck.position.y = 1;
            neck.position.z = 0;

            var sub = new Physijs.CylinderMesh(
                new THREE.CylinderGeometry(1.5, 1.5, 0, 32, 32 ),
                new THREE.MeshLambertMaterial({
                    color: Viensla.capmat.materials[1].color,
                    transparent : true,
                    opacity:1
                })
                ,0);
            sub.position.x = 0;
            sub.position.y = 0.3;
            sub.position.z = 0;

            var collisionSphere = new Physijs.CylinderMesh(
                new THREE.CylinderGeometry(3, 3, 1, 32, 32 ),
                new THREE.MeshLambertMaterial({
                    transparent : true,
                    opacity:0
                })
                ,0.1);
            this.bottlecaps.add(collisionSphere);


            this.bottlecaps.add(sub);
//        this.bottlecaps.add(neck);

            this.bottlecaps.name = 'vlCap';
            this.bottlecaps.collided = false;

            scene.add(Viensla.bottlecaps);
        },
        shootCaps : function(data){
            Viensla.isPlaying = true;
            Player.isPlaying = false;

            var  launchVector = new THREE.Vector3,
                _vector = new THREE.Vector3,
                _angVector = new THREE.Vector3,
                _posVector = new THREE.Vector3;

            globalDirection = -1;

            _posVector.set(Viensla.livePos.x,Viensla.livePos.y, Viensla.livePos.z);

            create_caps('vl');

            playedCaps.position.copy(_posVector);

            playedCaps.__dirtyPosition = true;
            playedCaps.floating = false;

            _vector.set( 1, 1, 1 );
            _angVector.set( -data.rdms[0], data.rdms[1], data.rdms[2]);
            playedCaps.setAngularFactor( _vector );

            playedCaps.setLinearFactor( _vector );
            launchVector.set(1,1, -data.pwr * playerstrengh * globalDirection);
            playedCaps.setLinearVelocity( launchVector );
            playedCaps.setAngularVelocity( _angVector );

            playedCaps = null;

            Viensla.totalLaunched++;

            setTimeout(function(){
                Viensla.isPlaying = false;
                Player.isPlaying = true;
                Party.setTurn();
            }, 500);


        },
        launchCaps : function(){
            Viensla.isPlaying = true;
            Player.isPlaying = false;

            var  launchVector = new THREE.Vector3,
                _vector = new THREE.Vector3,
                _angVector = new THREE.Vector3,
                _posVector = new THREE.Vector3,
                randomY = Math.random()*20 + 80,
                randomX = Math.random()*10 - 5,
                shot = Math.round(Math.random()*3);


            shot = perfectShoot[shot];

            globalDirection = -1;

            power = Math.round(shot.pwr +  (Math.random()-0.5) * Viensla.imprecision);

            randomY = Math.round(shot.y +  (Math.random()-0.5) * Viensla.imprecision);

            randomX = Math.round(shot.x +  (Math.random()-0.5) * Viensla.imprecision);

            if(Viensla.isPerfect){
                var alea = Math.round(Math.random()*3);
                randomY = perfectShoot[alea].y;
                randomX  = perfectShoot[alea].x;
                power = perfectShoot[alea].pwr;
            }

            randomY += 25;


            _posVector.set(randomX,randomY, playerDistance*globalDirection + 40);

//        _posVector.set(Viensla.livePos.x,Viensla.livePos.y, Viensla.livePos.z);

            create_caps('vl');

            playedCaps.position.copy(_posVector);
            playedCaps.__dirtyPosition = true;

            playedCaps.floating = false;

            _vector.set( 1, 1, 1 );
            _angVector.set( Math.random()*10, Math.random()*10, Math.random()*20);
            playedCaps.setAngularFactor( _vector );

            playedCaps.setLinearFactor( _vector );
            launchVector.set(1,-3, - power * strengh * globalDirection);
            playedCaps.setLinearVelocity( launchVector );
            playedCaps.setAngularVelocity( _angVector );

            playedCaps = null;

        },

        changeBottle:function(bottle){
            $vlpart.removeClass('chimey foster ptp lef pelle chouffe');
            $vlpart.addClass(bottle);
            $('#versus-bar .vl').addClass(bottle);

            Viensla.capmat = caps_material[bottle];
            Viensla.bottle.material.color = Viensla.capmat.materials[1].color;

        }


    }
    var extSnd = '.mp3';
    var path = 'assets/sounds/';
    var Snds = {
        ambiance : new Audio(path+'ambiance'+extSnd),
        simpletap1 : new Audio(path+"choc_simple_1"+extSnd),
        simpletap2 : new Audio(path+"choc_simple_2"+extSnd),
        simpletap3 : new Audio(path+"choc_simple_3"+extSnd),
        clink : new Audio(path+"clink"+extSnd),
        capcap : new Audio(path+"caps"+extSnd),
        open : new Audio(path+"open"+extSnd),
        pschit2 : new Audio(path+"pschit_2"+extSnd),
        win : new Audio(path+"you-win"+extSnd),
        lose: new Audio(path+"you-lose"+extSnd),
        vibreur: new Audio(path+"vibreur"+extSnd),
        clairon: new Audio(path+"fail"+extSnd),
        applause: new Audio(path+"applause"+extSnd),

        mute : false,
        init : function(){
            var $mtbt = $('#mute');

            $mtbt.on('click', function(){
                $(this).toggleClass('off');
                Snds.mute = !Snds.mute;
                Snds.ambiance.muted = Snds.mute;
            });

            Snds.simpletap1.volume=0.4;
            Snds.simpletap2.volume=0.4;
            Snds.simpletap3.volume=0.4;
            Snds.clink.volume=0.4;
            Snds.vibreur.volume=0.5;

            Snds.ambiance.addEventListener('ended', function() {
                this.currentTime = 0;
                this.play();
            }, false);

            Snds.ambiance.load();


            Snds.playSd = function(sd){
                if(!Snds.mute){
                    Snds[sd].currentTime = 0;
                    Snds[sd].play();
                    Snds[sd].isPlaying = true;
                }
            };

            Snds.fadeSd = function(sd, to){
                var interval;

                if(typeof to == 'undefined')
                    to = 0;

                if(!Snds[sd].isFading){
                    Snds[sd].isFading = true;

                    if(!Snds.mute){
                        interval = setInterval(function(){
                            if(Snds[sd].volume > to+0.05){
                                Snds[sd].volume -= 0.05;
                            }else{
                                Snds[sd].volume = to;
                                clearInterval(interval);
                                Snds[sd].isFading = false;
                            }
                        }, 200);
                    }
                }
            };

            Snds.fadInSd = function(sd){
                var interval;

                if(!Snds[sd].isFading){
                    Snds[sd].isFading = true;
                    Snds[sd].volume = 0;
                    Snds[sd].play();

                    if(!Snds.mute){
                        interval = setInterval(function(){
                            if(Snds[sd].volume < 0.3){
                                Snds[sd].volume += 0.05;
                            }else{
                                clearInterval(interval);
                                Snds[sd].isFading = false;
                            }
                        }, 300);
                    }
                }
            };

        }
    };


    var caps_material, sticker_materials;
    var mat_caps_foster;
    var mat_caps_chimey;
    var mat_caps_pelle;
    var mat_caps_lef;
    var mat_caps_chouffe;
    var mat_caps_ptp;

    var geo_caps, bottle_geo, bottle_mat;

    function loadBottleTools(){
        var loader = new THREE.JSONLoader();

        sticker_materials = {
            'chimey':new THREE.MeshBasicMaterial({map:THREE.ImageUtils.loadTexture('images/beers/stickers/small/chimais.png'),side:2, transparent:true,opacity:1}),
            'foster':new THREE.MeshBasicMaterial({map:THREE.ImageUtils.loadTexture('images/beers/stickers/small/faustaire.png'),side:2, transparent:true,opacity:1}),
            'lef':new THREE.MeshBasicMaterial({map:THREE.ImageUtils.loadTexture('images/beers/stickers/small/lef.png'),side:2, transparent:true,opacity:1}),
            'pelle':new THREE.MeshBasicMaterial({map:THREE.ImageUtils.loadTexture('images/beers/stickers/small/pelle.png'),side:2, transparent:true,opacity:1}),
            'chouffe':new THREE.MeshBasicMaterial({map:THREE.ImageUtils.loadTexture('images/beers/stickers/small/shouffe.png'),side:2, transparent:true,opacity:1}),
            'ptp':new THREE.MeshBasicMaterial({map:THREE.ImageUtils.loadTexture('images/beers/stickers/small/ptp.png'),side:2, transparent:true,opacity:1})
        };
        sticker_materials.chimey.map.minFilter = THREE.LinearFilter;
        sticker_materials.foster.map.minFilter = THREE.LinearFilter;
        sticker_materials.lef.map.minFilter = THREE.LinearFilter;
        sticker_materials.pelle.map.minFilter = THREE.LinearFilter;
        sticker_materials.chouffe.map.minFilter = THREE.LinearFilter;
        sticker_materials.ptp.map.minFilter = THREE.LinearFilter;


        loader.load( 'model/3D/cap_light.json', function ( cap_geometry, cap_materials ) {
            loader.load( 'model/3D/bottle_light.json', function ( bottle_geometry, bottle_materials ) {

                bottle_geo = bottle_geometry;


                var bottle_material = bottle_materials[ 0 ];
                bottle_material.side = 2;
                bottle_material.shininess = 0;
                bottle_material.shading = 0;
                bottle_material.reflectivity = 0;
                bottle_material.color.setHex(0xffffff);

                bottle_mat = new THREE.MeshFaceMaterial( bottle_materials );

                geo_caps = cap_geometry;
//                geo_caps = new THREE.SphereGeometry(2, 32);

                // CHIMEY CAPS ----------------------------------------------
                var copychimey  = [];
                copychimey[0] = cap_materials[0].clone();
                copychimey[1] = cap_materials[0].clone();
                copychimey[0].side = 2;
                copychimey[1].side = 2;
                copychimey[1].map = 0;



                mat_caps_chimey = new THREE.MeshFaceMaterial(copychimey);
                mat_caps_chimey.materials[1].color =  new THREE.Color(beerColors.chimey);

                // FOSTER CAPS ----------------------------------------------
                var copyfoster  =[];
                copyfoster[0] = cap_materials[1].clone();
                copyfoster[1] = cap_materials[0].clone();
                copyfoster[0].side = 2;
                copyfoster[1].side = 2;
                copyfoster[1].map = 0;

                mat_caps_foster = new THREE.MeshFaceMaterial(copyfoster);
                mat_caps_foster.materials[1].color =  new THREE.Color(beerColors.foster);

                // Leff CAPS ----------------------------------------------
                var copylef  =[];
                copylef[0] = cap_materials[2].clone();
                copylef[1] = cap_materials[0].clone();
                copylef[0].side = 2;
                copylef[1].side = 2;
                copylef[1].map = 0;

                mat_caps_lef = new THREE.MeshFaceMaterial(copylef);
                mat_caps_lef.materials[1].color =  new THREE.Color(beerColors.lef);


                // Leff CAPS ----------------------------------------------
                var copypelle  =[];
                copypelle[0] = cap_materials[3].clone();
                copypelle[1] = cap_materials[0].clone();
                copypelle[0].side = 2;
                copypelle[1].side = 2;
                copypelle[1].map = 0;

                mat_caps_pelle = new THREE.MeshFaceMaterial(copypelle);
                mat_caps_pelle.materials[1].color =  new THREE.Color(beerColors.pelle);


                // Leff CAPS ----------------------------------------------
                var copychouffe  =[];
                copychouffe[0] = cap_materials[4].clone();
                copychouffe[1] = cap_materials[0].clone();
                copychouffe[0].side = 2;
                copychouffe[1].side = 2;
                copychouffe[1].map = 0;

                mat_caps_chouffe = new THREE.MeshFaceMaterial(copychouffe);
                mat_caps_chouffe.materials[1].color =  new THREE.Color(beerColors.chouffe);

                // PTP CAPS ----------------------------------------------
                var copyptp  =[];
                copyptp[0] = cap_materials[5].clone();
                copyptp[1] = cap_materials[2].clone();
                copyptp[0].side = 2;
                copyptp[1].side = 2;
                copyptp[1].map = 0;

                mat_caps_ptp = new THREE.MeshFaceMaterial(copyptp);
                mat_caps_ptp.materials[1].color =  new THREE.Color(beerColors.ptp);


                caps_material = {
                    'chimey':mat_caps_chimey,
                    'foster':mat_caps_foster,
                    'lef':mat_caps_lef,
                    'pelle':mat_caps_pelle,
                    'chouffe':mat_caps_chouffe,
                    'ptp':mat_caps_ptp
                };




                initScene();
            });
        });
    }

    var pointlightbar;
    var hemiLight;
    function create_lights(){



        // LIGHTS

        hemiLight = new THREE.HemisphereLight( 0xffffff, 0xffffff, 0.3 );
        hemiLight.color.setHSL( 0.6, 1, 0.6 );
        hemiLight.groundColor.setHSL( 0.095, 1, 0.75 );
        hemiLight.position.set( 0, 500, 0 );
        scene.add( hemiLight );

        var dirLight = new THREE.DirectionalLight( 0xffffff, 0.5 );
        dirLight.color.setHSL( 0.1, 1, 0.95 );
        dirLight.position.set( 0, 1, 0 );
        dirLight.position.multiplyScalar( 50 );
        scene.add( dirLight );

        dirLight.castShadow = true;

        dirLight.shadowMapWidth = 2048;
        dirLight.shadowMapHeight = 2048;

        var d = 50;

        dirLight.shadowCameraLeft = -d;
        dirLight.shadowCameraRight = d;
        dirLight.shadowCameraTop = d;
        dirLight.shadowCameraBottom = -d;

        dirLight.shadowCameraFar = 3500;
        dirLight.shadowBias = -0.0001;
        dirLight.shadowDarkness = 0.35;

//    scene.add(ambientLight);

        var VlspotLight = new THREE.SpotLight( 0xffffff );
        VlspotLight.position.set( 0, 160, -110 );
        VlspotLight.target.position.set(0,50,-110);
        VlspotLight.target.updateMatrixWorld();
        VlspotLight.intensity = 0.3;

        scene.add( VlspotLight );

        var centralSpot = new THREE.SpotLight( 0xffffff );
        centralSpot.position.set( 0, 300, 0 );
        centralSpot.target.position.set(0,0,0);
        centralSpot.target.updateMatrixWorld();
        centralSpot.intensity = 0.5;

        scene.add( centralSpot );


        var tableSpot = new THREE.SpotLight( 0xffffff );
        tableSpot.position.set( 0, 0, 120 );
        tableSpot.target.position.set(0,20,-110);
        tableSpot.target.updateMatrixWorld();
        tableSpot.intensity = 1;

        scene.add( tableSpot );


        pointlightbar = new THREE.PointLight( brown, 2, 100 );
        pointlightbar.position.set( 3, 180, -580 );
//    pointlightbar.add( new THREE.Mesh( new THREE.SphereGeometry( 5, 16, 8 ), new THREE.MeshBasicMaterial( { color: 0xfcd625 } ) ) );
        pointlightbar.animeLight = function(){
            if(Math.random() > 0.9){
                this.intensity = 0.2;
            }else{
                this.intensity = 2;
            }
        };

        scene.add( pointlightbar );




        var PlspotLight = VlspotLight.clone();
        PlspotLight.position.set( 0, 200, 120 );
        PlspotLight.target.position.set(0,50,120);
        PlspotLight.target.updateMatrixWorld();
        PlspotLight.intensity = 0.7;



        scene.add( PlspotLight );


        var backspotLight = new THREE.SpotLight( 0xffffff );
        backspotLight.position.set( 0, 300, -20 );
        backspotLight.target.position.set(0,20,-200);
        backspotLight.target.updateMatrixWorld();
        backspotLight.intensity = 0.5;
        scene.add( backspotLight );

        backspotLight = new THREE.SpotLight( 0xffffff );
        backspotLight.position.set( 500, 300, -20 );
        backspotLight.target.position.set(200,20,-200);
        backspotLight.target.updateMatrixWorld();
        backspotLight.intensity = 0.5;
        scene.add( backspotLight );

        backspotLight = new THREE.SpotLight( 0xffffff );
        backspotLight.position.set( -500, 300, -20 );
        backspotLight.target.position.set(-200,20,-200);
        backspotLight.target.updateMatrixWorld();
        backspotLight.intensity = 0.5;
        scene.add( backspotLight );


        var whitelight = new THREE.HemisphereLight( 0xffffff, 0xffffff, 0.4 );
        whitelight.color.setHex( 0xefefef );
        whitelight.groundColor.setHSL( 0.2,0.2,0.2 );
        whitelight.position.set( 0, 300, 0 );
        scene.add( whitelight );

        var back_whitelight = new THREE.HemisphereLight( 0xffffff, 0xffffff, 0.4 );
        back_whitelight.color.setHex( 0xefefef );
        back_whitelight.position.set( 0, 300, -400 );
        scene.add( back_whitelight );

    }


    planeWIDTH = 170;
    planeHEIGHT = 600;


    var tableSurfaceDim = [150, 5, 30];
    var tablefootSurfaceDim = [140, 55, 2];
    var level, _floor, _tapis, _tablefoot, _table, _wall, _bar, phone, phoneLight, lightScreen;


    var dust = [];
    function create_table(){

        //Set Level group
        level = new Physijs.BoxMesh(
            new THREE.BoxGeometry( 1, 1, 1 ),
            new THREE.MeshPhongMaterial({
                color: ptpgrey
            }),0
        );
        level.position.x = 0;
        level.position.y = 0;
        level.position.z = 0;
        level.castShadow = false;
        level.receiveShadow = false;
        level.name = 'level';



        //Add floor to level
        _floor = new Physijs.BoxMesh(
            new THREE.CylinderGeometry(800, 800, 30, 16),
            new THREE.MeshPhongMaterial({
                color: brown
            }),0
        );
//    _floor.rotation.x = Math.PI/2;
        _floor.position.x = 0;
        _floor.position.y = -1;
        _floor.position.z = 0;
        _floor.castShadow = false;
        _floor.receiveShadow = true;
        _floor.name = 'floor';

        level.add(_floor);


        var CustomSinCurve = THREE.Curve.create(
            function ( scale ) { //custom curve constructor
                this.scale = (scale === undefined) ? 1 : scale;
            },

            function ( t ) { //getPoint: t is between 0-1
                return new THREE.Vector3(0, t, 0).multiplyScalar(this.scale);
            }
        );

        var path = new CustomSinCurve( 200, 100 );

        var geometry = new THREE.TubeGeometry(
            path,  //path
            100,    //segments
            580,     //radius
            100,     //radiusSegments
            true  //closed
        );


//    for(var i=0; i<32; i++) {
//
//        if(i!=10) {
//            barGeo.faces[i].color.setHex( brown);
//        }
//
//    }


        _bar = new THREE.Mesh(
            geometry,
            new THREE.MeshBasicMaterial({
                color:brown,
                shininess:100,
                side:THREE.BackSide
            })
        );
        _bar.rotation.y = Math.PI/2;
        _bar.position.x = 0;
        _bar.position.y = -90;
        _bar.position.z = 100;
        _bar.castShadow = true;
        _bar.receiveShadow = true;
        _bar.name = 'bar';
        _bar.rotation.x = -0.06;

        level.add(_bar);


        //Add Wall to level
        var texture = THREE.ImageUtils.loadTexture('images/v2/bar_single.png');
        texture.minFilter = THREE.LinearFilter;

        _wall = new Physijs.BoxMesh(
            new THREE.BoxGeometry(500, 125, 1),
            new THREE.MeshBasicMaterial({
                map:texture,
                transparent:true,
                opacity:1
            }),
            0
        );
        _wall.position.x = 3;
        _wall.position.y = 77;
        _wall.position.z = -435;
        _wall.castShadow = true;
        _wall.receiveShadow = true;
        _wall.rotation.x = -0.06;

        level.add(_wall);

        texture = THREE.ImageUtils.loadTexture('images/v2/bar-neon-orange.png');
        texture.minFilter = THREE.LinearFilter;

        _wall = new Physijs.BoxMesh(
            new THREE.BoxGeometry(119, 68, 1),
            new THREE.MeshPhongMaterial({
                map:texture,
                transparent:true,
                opacity:0.7
            }),
            0
        );
        _wall.position.x = 3;
        _wall.position.y = 180;
        _wall.position.z = -600;
        _wall.castShadow = true;
        _wall.receiveShadow = true;
        level.add(_wall);

        texture = THREE.ImageUtils.loadTexture('images/v2/armoires_back.png');
        texture.minFilter = THREE.LinearFilter;

        _wall = new Physijs.BoxMesh(
//        285
            new THREE.BoxGeometry(1712, 335, 10),
            new THREE.MeshPhongMaterial({
                map:texture,
                transparent:true,
                opacity:0.2
            }),
            0
        );
        _wall.rotation.x = -0.37;
        _wall.position.x = 0;
        _wall.position.y = 130;
        _wall.position.z = -600;
        _wall.castShadow = true;
        _wall.receiveShadow = true;

        level.add(_wall);



        _tapis = new Physijs.BoxMesh(
            new THREE.BoxGeometry(planeWIDTH, planeHEIGHT, 35),
            new THREE.MeshPhongMaterial({
                color: mediumbrown
            }), 0
        );
        _tapis.rotation.x = Math.PI/2;
        _tapis.position.x = 0;
        _tapis.position.y = 0;
        _tapis.position.z = 0;
        _tapis.castShadow = false;
        _tapis.receiveShadow = false;
        _tapis.name = 'tapis';

        var tapiscircle = new Physijs.BoxMesh(
            new THREE.CylinderGeometry(140, 140, 10, 64),
            new THREE.MeshPhongMaterial({
                color: 0xffffff,
                transparent : true,
                opacity:0.1
            }),0
        );
        tapiscircle.rotation.x = Math.PI/2;
        tapiscircle.position.y = -80;
        tapiscircle.position.z = -10;
        _tapis.add(tapiscircle);



        var shadowcircle = new Physijs.BoxMesh(
            new THREE.CylinderGeometry(90, 90, 2, 64),
            new THREE.MeshPhongMaterial({
                color: 0x040404,
                transparent : true,
                opacity:0.05
            }),0
        );
        shadowcircle.scale.set(1,1,0.4);
        shadowcircle.rotation.x = Math.PI/2;
        shadowcircle.position.y = -130;
        shadowcircle.position.z = -17;
        _tapis.add(shadowcircle);

        scene.add(_tapis);




        //Add table foots


        var _tablefoot_geometry = new THREE.BoxGeometry(tablefootSurfaceDim[0], tablefootSurfaceDim[1]+10, tablefootSurfaceDim[2]);

        _tablefoot = new Physijs.BoxMesh(
            _tablefoot_geometry,
            new THREE.MeshPhongMaterial({
                color: tablefootbrown
            })
            , 0);


        var _tablefoot_outlines = new Physijs.BoxMesh(
            _tablefoot_geometry,
            new THREE.MeshPhongMaterial({
                color: 0x000000
            })
            , 0);
        _tablefoot_outlines.position.z = -0.5;
        _tablefoot_outlines.scale.set(1.01,1.05,1.05);
//    _tablefoot.add(_tablefoot_outlines);

        _tablefoot.castShadow = true;
        _tablefoot.receiveShadow = true;


        _tablefoot.rotation.x = 0.3;
        _tablefoot.position.x = 0;
        _tablefoot.position.y = tablefootSurfaceDim[1]-6.3;
        _tablefoot.position.z = -110;

        level.add(_tablefoot);

        //Add table
        var _table_geometry = new THREE.BoxGeometry(tableSurfaceDim[0], tableSurfaceDim[1], tableSurfaceDim[2]);

        _table = new Physijs.BoxMesh(
            _table_geometry,
            new THREE.MeshPhongMaterial({
                color: tablebrown
            }), 0
        );


        var _table_outlines = new Physijs.BoxMesh(
            _table_geometry,
            new THREE.MeshLambertMaterial({
                color: 0x000000
            })
            , 0);
        _table_outlines.position.z = -2;
        _table_outlines.position.y = -0.5;
        _table_outlines.scale.set(1.01,1.05,1.1);

//    _table.add(_table_outlines);

        _table.position.x = 0;
        _table.position.y = tablefootSurfaceDim[1] +tablefootSurfaceDim[1]/2 ;
        _table.position.z = -110;
        _table.castShadow = true;
        _table.receiveShadow = true;

        level.add(_table);

        _table = new Physijs.BoxMesh(
            new THREE.BoxGeometry(tableSurfaceDim[0]+100, tableSurfaceDim[1], tableSurfaceDim[2]),
            new THREE.MeshBasicMaterial({
                color: 0xf6c267
            }),
            0);

        _table_outlines = new Physijs.BoxMesh(
            new THREE.BoxGeometry(tableSurfaceDim[0]+100, tableSurfaceDim[1], tableSurfaceDim[2]),
            new THREE.MeshPhongMaterial({
                color: 0x000000
            }),
            0);

        _table_outlines.position.z = -0.5;
        _table_outlines.position.y = -0.2;
        _table_outlines.scale.set(1.01, 1, 1);

//    _table.add(_table_outlines);

        _table.position.x = 0;
        _table.position.y = tablefootSurfaceDim[1]+tablefootSurfaceDim[1]/2 ;
        _table.position.z =  110;
        _table.castShadow = true;
        _table.receiveShadow = true;

        level.add(_table);

        //Add Wall to level
        texture = THREE.ImageUtils.loadTexture('images/phone/phone_veille.png');
        texture.minFilter = THREE.LinearFilter;

        var phone_t = new THREE.MeshPhongMaterial({
            map: texture
        });
        var transparent_side =  new THREE.MeshPhongMaterial({
            color:0xfcd625
        });
        var phone_materials = [
            transparent_side,
            transparent_side,
            phone_t,
            transparent_side,
            transparent_side,
            transparent_side
        ];
        phone = new Physijs.BoxMesh(
            new THREE.BoxGeometry(10, 1, 14),
            new THREE.MeshFaceMaterial(phone_materials),
            0
        );
        phone.position.x = 50;
        phone.position.y = 3;
        phone.position.z = -5;
        phone.rotation.y = 0.3;
        phone.castShadow = true;
        phone.receiveShadow = true;

//    phoneLight = new THREE.PointLight( 0xffffff, 0, 100 );
//    phoneLight.position.set(0,0.5,0);
//    phoneLight.add(lightScreen);

//    var messageScreen = new THREE.Mesh(new THREE.BoxGeometry(10,0.1,14), new THREE.MeshBasicMaterial({opacity:0, transparent:true}));

        texture = THREE.ImageUtils.loadTexture('images/phone/phone_message.png');
        texture.minFilter = THREE.LinearFilter;

        var pictoScreen = new THREE.Mesh(new THREE.BoxGeometry(10,0.1,14), new THREE.MeshBasicMaterial({opacity:0, transparent:true, map: texture}));

        texture = THREE.ImageUtils.loadTexture('images/phone/phone_white.png');
        texture.minFilter = THREE.LinearFilter;

        var whiteScreen = new THREE.Mesh(new THREE.BoxGeometry(10,0.1,14), new THREE.MeshBasicMaterial({opacity:0, transparent:true, map: texture}));

//    messageScreen.add(pictoScreen);
//    messageScreen.add(whiteScreen);
        pictoScreen.position.set(0,0.5,0);
        whiteScreen.position.set(0,0.5,0);
        phone.add(pictoScreen);
        phone.add(whiteScreen);

        phone.receiveMessage = function(){
            Snds.playSd('vibreur');
            var i = 0;
            pictoScreen.material.opacity = 1;
            phone.interval = setInterval(function(){
                pictoScreen.material.opacity = i%2 == 0 ? 0 : 1;
                whiteScreen.material.opacity = i%2 == 0 ? 1 : 0;
                i++;
                if(i > 5){
                    clearInterval(phone.interval);
                }
            }, 250);
        };

        phone.closeMessage = function(){
            clearInterval(phone.interval);
            pictoScreen.material.opacity = 0;
            whiteScreen.material.opacity = 0;
        };

        _table.add(phone);




        scene.add(level);



        // material texture
//    var texture = new THREE.Texture( generateTexture() );
//    texture.needsUpdate = true; // important!

        // material
        var material = new THREE.MeshBasicMaterial( {
            color: 0xffffff,
//        shininess: 100,
            transparent:true,
            opacity:0.02,
//        map: texture,
            side : 2
        } );


        var _spot_fake = new THREE.Mesh(
            new THREE.CylinderGeometry(
                10, 164, 400, 32
            ),
            material
        );
        _spot_fake.scale.set(1,1,1);
        _spot_fake.rotation.y = Math.PI/2;
//    _spot_fake.receiveShadow = false;
//    _spot_fake.position.x = 0;
//    _spot_fake.position.y = 150;
//    _spot_fake.position.z = -100;


        var spotlightbar = new THREE.PointLight( 0xffffff, 0.1, 100 );
        spotlightbar.position.set( 0, 150, -80 );

        spotlightbar.add(_spot_fake);


        _spot_fake = new THREE.Mesh(new THREE.CylinderGeometry(10, 164, 400, 32),material);
        _spot_fake.scale.set(0.9,0.9,0.9);
        spotlightbar.add(_spot_fake);
        _spot_fake = new THREE.Mesh(new THREE.CylinderGeometry(10, 164, 400, 32),material);
        _spot_fake.scale.set(0.8,0.8,0.8);
        spotlightbar.add(_spot_fake);
        _spot_fake = new THREE.Mesh(new THREE.CylinderGeometry(10, 164, 400, 32),material);
        _spot_fake.scale.set(0.7,0.7,0.7);
        spotlightbar.add(_spot_fake);
        _spot_fake = new THREE.Mesh(new THREE.CylinderGeometry(10, 164, 400, 32),material);
        _spot_fake.scale.set(0.6,0.6,0.6);
        spotlightbar.add(_spot_fake);
        _spot_fake = new THREE.Mesh(new THREE.CylinderGeometry(10, 164, 400, 32),material);
        _spot_fake.scale.set(0.5,0.5,0.5);
        spotlightbar.add(_spot_fake);
        _spot_fake = new THREE.Mesh(new THREE.CylinderGeometry(10, 164, 400, 32),material);
        _spot_fake.scale.set(0.4,0.4,0.4);
        spotlightbar.add(_spot_fake);
        _spot_fake = new THREE.Mesh(new THREE.CylinderGeometry(10, 164, 400, 32),material);
        _spot_fake.scale.set(0.3,0.3,0.3);
        spotlightbar.add(_spot_fake);


        scene.add(spotlightbar);



        // SKYDOME
        var hemiLight = new THREE.HemisphereLight( lightbrown, lightbrown, 0.5 );
        hemiLight.color.setHex( lightbrown );
        hemiLight.groundColor.setHSL( 0.5,0.5,0.5 );
        hemiLight.position.set( 0, 600, 0 );


        var vertexShader = document.getElementById( 'vertexShader' ).textContent;
        var fragmentShader = document.getElementById( 'fragmentShader' ).textContent;
        var uniforms = {
            topColor: 	 { type: "c", value: new THREE.Color( darkbrown ) },
            bottomColor: { type: "c", value: new THREE.Color( lightbrown ) },
            offset:		 { type: "f", value: 10 },
            exponent:	 { type: "f", value: 0.7 }
        }
        uniforms.topColor.value.copy( hemiLight.color );

//    scene.fog.color.copy( uniforms.bottomColor.value );

        var skyGeo = new THREE.SphereGeometry( 1600, 4, 5 );
        var skyMat = new THREE.ShaderMaterial( { vertexShader: vertexShader, fragmentShader: fragmentShader, uniforms: uniforms, side: THREE.BackSide } );
//    var skyMat = new THREE.MeshPhongMaterial({color:lightestbrown,side: THREE.BackSide, shininess:500});
        var sky = new THREE.Mesh( skyGeo, skyMat );
        scene.add( sky );



//    var skyGeo = new THREE.SphereGeometry( 1500, 4, 15 );
//    var skyMat = new THREE.MeshPhongMaterial({color:lightestbrown,side: THREE.BackSide, shininess:500});
//    var sky = new THREE.Mesh( skyGeo, skyMat );
//    scene.add( sky );
//    sphere_traj = new THREE.Mesh(
//        new THREE.BoxGeometry(1, 1, 1),
//        new THREE.MeshBasicMaterial({
//            color:0xffffff
//        })
//    );




        var dustTexture = new THREE.ImageUtils.loadTexture('images/dust.png');
        dustTexture.minFilter = THREE.LinearFilter;
        var particle;
        var dustGeometry = new THREE.Geometry();
        var sizes = [5, 4, 3, 2, 1];


        for (var i = 0; i < 200; i++) {
            var vertex = new THREE.Vector3();
            vertex.x = Math.random() * 120 - 60;
            vertex.y = Math.random() * 120 - 60;
            vertex.z = Math.random() * 120 - 60;

            dustGeometry.vertices.push( vertex );
        }
        for(var i = 0; i < sizes.length; i++){
            var mat = new THREE.PointCloudMaterial( {
                size: sizes[i],
                map: dustTexture,
                blending: THREE.AdditiveBlending,
                transparent: true,
                opacity:0.04
            });
            particle = new THREE.PointCloud( dustGeometry, mat );
            particle.rotation.x = Math.random() * 6;
            particle.rotation.y = Math.random() * 6;
            particle.rotation.z = Math.random() * 6;
            particle.position.y = 120;
            particle.position.z = -50;

            dust.push(particle);
            scene.add(particle);
        }



    }
    var caps_group = [];

    function create_caps_group(){
        var caps_pos = [
            [-40, 85, 110],
            [-35,88, 110],
            [-37, 89, 112],
            [-34, 85, 111],
            [40, 85, -110],
            [35,88, -110],
            [34, 85, -111],
        ];
        for(var i = 0; i < 7; i++){
            caps_group.push(new Physijs.CylinderMesh(geo_caps, caps_material.ptp, 0.4, {friction : 1, restitution : 0.5}));
            caps_group[i].scale.set(capModelscale,capModelscale,capModelscale);
            caps_group[i].position.x = caps_pos[i][0];
            caps_group[i].position.y = caps_pos[i][1];
            caps_group[i].position.z = caps_pos[i][2];
            caps_group[i].rotation.y = Math.PI/(i+1);
            scene.add(caps_group[i]);
        }
    }


    function generateTexture() {

        var size = 150;
        // create canvas
        var canvas = document.createElement( 'canvas' );
        canvas.width = size;
        canvas.height = size;

        // get context
        var context = canvas.getContext( '2d' );

        // draw gradient

        context.rect( 0, 0, size, size );

        var gradient = context.createLinearGradient( 0, 0, size-50, size );

        gradient.addColorStop(0, '#ffffff'); // light blue
        gradient.addColorStop(1, 'transparent'); // dark blue
        context.fillStyle = gradient;
        context.fill();

        return canvas;

    }
    var generatedNames = [
        "Merlin l'Emmancheur",
        "Sac à bière",
        "Maître Brasseur",
        "Chuck Boris",
        "Vomito",
        "Fredo Mercure",
        "The Undertaker",
        "Capsulator",
    ];
    var autoMessages,poteRelou;

    var Interface = {
        $currentPart : null,
        curIndex: 0,
        multiRdy : false,
        pickNameRdy : false,
        pickCapsRdy : false,
        gameRdy : false,
        txtoRdy : false,

        capTuto : null,

        init : function(){

            $plpart = $('.pl-part');
            $vlpart = $('.vl-part');
            $capsTypo = $('#caps-m');
            $startTypo = $('#start-m');
            $winTypo = $('#win-m');
            $loseTypo = $('#lose-m');
            $perfectTypo = $('#perfect-m');

            this.resize();
            this.initWelcome();
            this.initResetParty();
            this.initMenu();
            this.hdr.init();

            window.addEventListener( 'resize', Interface.resize, false );

            Snds.init();

            this.capTuto = $plpart.find('.cap-tuto');
            this.capTuto.show = function(){
                TweenMax.fromTo(Interface.capTuto,0.5,{scale:0, opacity:0}, {scale:1, opacity:1, ease:Elastic.easeOut.config(1, 0.4),  delay:1.8});
            };
            this.capTuto.hide = function(){
                TweenMax.to(Interface.capTuto, 0.5, {scale:0, opacity:0});
            };
        },
        resize : function(){
            $('section.sc').css({height: window.innerHeight, lineHeight: window.innerHeight+"px"});
            $('#wrapper').css({width: window.innerWidth, height: window.innerHeight});
            TweenLite.set($('#site-content'),{y : -Interface.curIndex*window.innerHeight});
        },
        navigate : function(to){

            if(to == 3){
                if(!this.pickNameRdy)
                    this.initPickName();

                if(!CAPS.solo){
                    this.hdr.multiPartyLaunched = true;
                }

            }else if(to == 4){
                if(!this.pickCapsRdy)
                    this.initCapsSelect();
            }else if(to == 6){

                if(!this.gameRdy){
                    setTimeout(CAPS.launchGame, 400);
                }
            }

            if(to==1 || to==3 || to==4){
                this.hdr.show();

                if(this.hdr.multiPartyLaunched && to==3){
                    this.hdr.hideBt();
                }else{
                    this.hdr.showBt();
                }
            }else{
                this.hdr.hide();
            }


            TweenLite.to($('#site-content'), 0.3, {y : -to*window.innerHeight});
            this.curIndex = to;
        },
        navigateBack : function(){
            var nextIndex = 0,
                ci = Interface.curIndex;

            if((ci == 3 && CAPS.solo) || ci == 1)
                nextIndex = 0;
            else if(ci == 4)
                nextIndex = 3;

            this.navigate(nextIndex);
        },
        initWelcome : function(){
            var $welcome = $('#welcome'),
                $pelle = $welcome.find('.cp-pelle'),
                $foster = $welcome.find('.cp-foster'),
                $logo = $welcome.find('.logo'),
                $water = $welcome.find('.water'),
                $soloBtn = $welcome.find('#bt-play-solo'),
                $multiBtn = $welcome.find('#bt-play-online'),
                $btBackGlobal = $('#bt-back-global');

            this.$currentPart = $welcome;

            var tms = [
                new TimelineMax({paused:true, repeat:-1, yoyo:true}),
                new TimelineMax({paused:true, repeat:-1, yoyo:true}),
                new TimelineMax({paused:true, repeat:-1, yoyo:true}),
                new TimelineMax({paused:true, repeat:-1, yoyo:true})
            ];

            var time = 8;

            tms[0].add(TweenMax.fromTo( $pelle,time,
                {x:-5, y:0, rotation:0, scale:0.85}, {x:-15, y:-10, rotation:6, scale:1}
            ));

            tms[1].add(TweenMax.fromTo( $foster,time,
                {x:0, y:0, rotation:0, scale:0.85}, {x:8, y:-4, rotation:-6, scale:1}
            ));

            tms[2].add(TweenMax.fromTo($logo ,time,
                {x:0, y:0, rotation:0, scale:0.9}, {x:8, y:3, rotation:4, scale:1}
            ));

            tms[3].add(TweenMax.fromTo( $water,time,
                {x:0, y:0, rotation:0, scale:0.8}, {x:0, y:0, rotation:-4, scale:1}
            ));

            setTimeout(function(){
                tms[0].play();
                tms[1].play();
                tms[2].play();
                tms[3].play();
            },1000);


            initializeParty();

            $soloBtn.click(function(){
                CAPS.solo = true;
                $('#wrapper').addClass('solo');
                Interface.navigate(3);
            });
            $multiBtn.click(function(){
                CAPS.solo = false;
                $('#wrapper').removeClass('solo');

                Interface.navigate(1);
                if(!Interface.multiRdy) Interface.initMulti();
            });
            $btBackGlobal.click(function(){
                Interface.navigateBack();
            });


        },



        initMulti : function(hash){
            this.multiRdy = true;

            if(hash){
                $('#join-code').val(hash);
                Game.Player.onPlayerStartClick();
            }else{
                var $multi = $('#multiplayer'),
                    $generateCode = $multi.find('#host-party'),
                    $startParty = $multi.find('#start-party'),
                    $joinParty = $multi.find('#join-party');

                $('#host-codes .box').click(function(){
                    $(this).find('input').select();
                });

                $generateCode.on('click', Game.Host.onCreateClick);
                $joinParty.on('click', Game.Player.onPlayerStartClick);
                $startParty.on('click', Game.Player.onPlayerStartClick);
            }


        },

        initPickName : function(){
            this.pickNameRdy = true;


            var $pickname = $('#pickname'),
                $generateName = $pickname.find('#bt-generate-name'),
                $sendName = $pickname.find('#bt-send-name'),
                namesCopy = generatedNames.slice(),
                nameItv;

            $sendName.on('click', function(){
                Game.Player.name = $('#input-player-name').val() || generatedNames[Math.round(Math.random()*(generatedNames.length-1))];
                Interface.navigate(4);
            });

            $generateName.on('click', function(){
                clearInterval(nameItv);


                var rd = Math.round(Math.random()*(namesCopy.length-1));
                var name = (namesCopy.splice(rd, 1)).toString();
                var full = '';
                var i = 0;
                var $input =  $('#input-player-name');

                nameItv = setInterval(function(){
                    full += name.charAt(i);
                    $input.val(full);
                    i++;
                    if(i == name.length){
                        clearInterval(nameItv);
                    }
                }, 30);
                if(namesCopy.length == 0){
                    namesCopy = generatedNames.slice();
                }
            });

        },

        initCapsSelect: function(){
            this.pickCapsRdy = true;

            var $slideShow = $('#beer-slide-c'),
                $capSlides = $slideShow.find('.cap-list li'),
                $bgSlides = $('#beer-bg-slider li'),
                $navBtm = $slideShow.find('.nav-bottle li'),
                $arr = $slideShow.find('.arw'),
                curSlide = 0,
                $sendCaps = $('#bt-send-caps'),
                $bgMask = $('#beer-bg-slider .blc-msk'),
                colorName = ['ptp', 'chouffe', 'pelle', 'foster', 'lef', 'chimey'];

            $navBtm.click(function(){
                var i = $(this).index();
                changeSlide(i);
            });

            $arr.click(function(){
                var i = 0;
                if($(this).hasClass('lf-arw')){
                    i = curSlide == 0 ? 5 : curSlide-1;
                }else{
                    i = curSlide == 5 ? 0 : curSlide+1;
                }
                changeSlide(i);
            });


            function changeSlide(i){
                var lf = i > curSlide;

                $capSlides.eq(curSlide).addClass(lf ? 'lf' : 'rg');
                $capSlides.eq(i).removeClass('lf rg');
                $capSlides.slice(i+1).addClass('na').removeClass('lf').addClass('rg').removeClass('na');
                $capSlides.slice(0,i).addClass('na').removeClass('rg').addClass('lf').removeClass('na');

                if(i==5){
                    $capSlides.eq(0).addClass('na').removeClass('lf').addClass('rg').removeClass('na');
                }else if(i==0){
                    $capSlides.eq(5).addClass('na').removeClass('rg').addClass('lf').removeClass('na');
                }

                Game.Player.caps = $capSlides.eq(i).attr('id');
                refreshNav(i);
                curSlide = i;
            }

            function refreshNav(i){
                $navBtm.removeClass();
                $navBtm.eq(i).addClass('act');
                $bgSlides.removeClass('act');
                $bgSlides.eq(i).addClass('act');

                $bgMask.removeClass('ptp chouffe pelle foster lef chimey').addClass(colorName[i]);
            }

            if(CAPS.solo)
                $sendCaps.on('click', function(){Interface.navigate(6)});
            else
                $sendCaps.on('click', Game[Game.role].sendPlayerInfo);

        },
        textoBox : {
            $sdBox : null,
            $rdBox :null,
            tm : null,
            init : function(){

                Interface.txtoRdy = true;

                autoMessages = [
                    "<p>Maman :</p><p>encore.au.bar?bisou.maman</p>",
                    "<p>Chaton <3 :</p><p>"+Game.Player.name+", c'est fini nous deux, je pars avec Fredo.</p>",
                    "<p>Soeurette :</p><p>Qu'est-ce que tu fous "+Game.Player.name+" ?! Tout le monde t'attend au mariage de Tata Jacqueline !</p>",
                    "<p>Boss :</p><p>Bonsoir, j'attends votre rendu sur le cas ROUME demain matin à 6h sur mon bureau.</p>",
                    "<p>PizzaPingui :</p><p>Dépechez vous ! Pour deux pizzas thon patate mayo achetées, la troisième offerte !</p>",
                    "<p>Tony CAZANASS :</p><p>Crois pas que tu va t'en tirer comme ça "+Game.Player.name+ ", on va venir te couper les pieds !</p>",
                    "<p>Ben :</p><p>Yo gro bien ? dsl mai ta pas 100 balle à m'depanne ?</p>",

                ];

                poteRelou = [
                    "<p>Alex:</p><p>Beerpong ce soir ?</p>",
                    "<p>Alex:</p><p>Petite pétanque tout à l'heure ?</p>",
                    "<p>Alex:</p><p>Alors, ça sort ce soir ?</p>",
                    "<p>Alex:</p><p>Allooooooooo</p>",
                    "<p>Alex:</p><p>???????</p>"
                ];

                this.$sdBox = $('#sd-messages-box');
                this.$rcBox = $('#rc-messages-box');

                if(CAPS.solo){
                    $('#txto-sd').remove();
                    var txtoItv = setInterval(function(){
                        if(autoMessages.length > 0 || poteRelou.length > 0){
                            Interface.textoBox.showTexto(0);
                        }else{
                            clearInterval(txtoItv);
                        }
                    }, 30000+Math.random()*10000);
//                }, 10000+Math.random()*5000);
                }




                var $rcb = this.$rcBox;

                var sendDelay = 10000;

                this.$sdBox.on('click', 'li', function(){
                    var i = $(this).index();
                    Game.Player.playerMessage(i);
                    $('#txto-sd').addClass('disabled');

                    setTimeout(function(){
                        $('#txto-sd').removeClass('disabled');
                    }, sendDelay);
                });

                this.tm = new TimelineMax({paused:true});

                this.tm.to($rcb, 0, {width:0, height:0, opacity:0})
                    .to($rcb, 0.3, {width:250, height:3, opacity:1, ease: Elastic.easeOut.config(1, 0.4)}, 0.1)
                    .to($rcb, 0.3, {height:90, ease: Elastic.easeOut.config(1, 0.4)});
                TweenLite.set($rcb,{width:0, height:0, opacity:0})


            },
            showTexto : function(i){


                var shownTime = 7500;
                var $rcb = this.$rcBox;
                var texto;
                if(CAPS.solo){
                    if((Math.random() > 0.3 || poteRelou.length == 0) && autoMessages.length > 0){
                        var rdt = Math.round(Math.random()* (autoMessages.length-1));
                        texto = autoMessages[rdt];
                        autoMessages.splice(rdt, 1);
                    }else if(poteRelou.length > 0){
                        texto = poteRelou[0];
                        poteRelou.splice(0, 1);
                    }
                }else{
                    texto = '<p>'+Game.Enemy.name+' :</p>'+this.$sdBox.find('li div').eq(i).html();
                }

                $rcb.find('.center').empty().append(texto);
                $rcb.find('p').lettering();
                $rcb.find('span').css({opacity:0});

                if(phone) phone.receiveMessage();

                setTimeout(function(){
                    Interface.textoBox.tm.play();

                    setTimeout(function(){
                        var n = 0;
                        var spanInt = setInterval(function(){
                            TweenLite.set($rcb.find('span').eq(n), {opacity:1});
                            n++;
                            if(n == $rcb.find('span').length){
                                clearInterval(spanInt);
                            }
                        }, 0.4);
                    }, 1000);


                    setTimeout(function(){
                        var nbSpan = $rcb.find('span').length-1;
                        var n = nbSpan;

                        var spanInt = setInterval(function(){
                            TweenLite.set($rcb.find('span').eq(n), {opacity:0});
                            n--;
                            if(n == -1){
                                clearInterval(spanInt);
                            }
                        }, 0.2);
                        setTimeout(function(){
                            Interface.textoBox.tm.reverse();

                            setTimeout(function(){
                                phone.closeMessage();
                            }, 800);

                        }, (nbSpan-1)*10);

                    }, shownTime);
                }, 1000);
            }
        },
        initResetParty : function(){
            var $resetC = $('#reset-party-c'),
                $h3 = $resetC.find('h3'),
                $h4 = $resetC.find('h4');

            TweenMax.set($h4,{scale:0.5, opacity:0, height:0});


            $resetC.find('#bt-reset-party').click(function(){

                if(CAPS.solo){
                    Party.resetParty();
                }else{
                    Game.Player.playerReset();
                    $resetC.addClass('loading');
                    TweenMax.to($h3, 0.4, {scale:0.5, opacity:0, onComplete: function(){
                        $h3.text('En attente de ton adversaire...');
                        TweenMax.to($h3, 0.4, {scale:1, opacity:1, delay:0.5,  ease:Elastic.easeOut.config(1, 0.4)});
                    }});
                }
            });

            $resetC.find('#bt-quit-reset').click(function(){
                Game.Player.playerQuit();
                window.location = location.href.replace(location.hash,'');
            });
        },
        initMenu : function(){
            var $btMenu = $('#bt-menu'),
                $btClose = $('#bt-close-menu'),
                $btCloseTuto = $('#bt-close-tuto'),
                $btQuit = $('#lk-quit'),
                $menu = $('#pause-menu'),
                $volets = $menu.find('.volet'),
                $quit = $menu.find('#quit-pause'),
                $btsQuit = $quit.find('.bt');


            $btMenu.click(function(){
                TweenMax.to($menu, 0.7, {opacity:1, display:"block"});
                TweenMax.to($btMenu, 0.3, {opacity:0});
                TweenMax.to($('footer'),0.5,{display:'block', opacity:1});

            });


            $menu.find('#lk-about').click(function(){
                $volets.addClass('hidden');
                $volets.filter('#about-pause').removeClass('hidden');
            });

            $menu.find('#lk-tuto').click(function(){
                $volets.addClass('hidden');
                $volets.filter('#tuto-pause').removeClass('hidden');
                TweenMax.to($btClose, 0.5, {opacity:0});
                TweenMax.to($menu.find('.pause-logo'), 0.5, {scale:0, opacity:0, ease:Elastic.easeOut.config(1, 0.4)});
                if(Player.totalLaunched == 0)
                    TweenMax.to($plpart.find('.cap-tuto'), 0.5, {scale:0, opacity:0, ease:Elastic.easeOut.config(1, 0.4)});

            });

            $menu.find('.back').click(function(){
                $volets.addClass('hidden');
                TweenMax.to($menu.find('.pause-logo'), 0.5, {scale:1, opacity:1});
                $volets.filter('#home-pause').removeClass('hidden');
            });


            $($btClose).click(closeMenu);
            $($btCloseTuto).click(closeMenu);

            function closeMenu(){
                TweenMax.to($('footer'),0.5,{opacity:0});
                TweenMax.to($menu, 0.7, {opacity:0, onComplete: function(){
                    TweenMax.to($btMenu, 0.3, {opacity:1});

                    TweenMax.set($menu, {display:"none"});

                    $volets.addClass('hidden');

                    TweenMax.set($btClose, {scale:1, opacity:1});

                    TweenMax.set($menu.find('.pause-logo'), {scale:1, opacity:1});
                    $volets.filter('#home-pause').removeClass('hidden');

                    $('footer').hide();

                }});
            }

            $btQuit.click(function(){
                $volets.addClass('hidden');
                $quit.removeClass('hidden');
            });
            $btsQuit.click(function(){
                if($(this).hasClass('no')){
                    $volets.addClass('hidden');
                    TweenMax.to($menu.find('.pause-logo'), 0.5, {scale:1, opacity:1});
                    $volets.filter('#home-pause').removeClass('hidden');
                }else{
                    window.location = location.href.replace(location.hash,'');
                }
            });

        },
        hdr : {
            $logo : null,
            $bt : null,
            active:true,
            multiPartyLaunched: false,
            init:function(){
                this.$logo = $('header h1');
                this.$bt = $('header .bt');
                $('header').hide();
                this.hide();

//            $('footer').hide();
            },
            show : function(){
                $('header').show();
                TweenMax.to(Interface.hdr.$logo,0.5,{scale:1, opacity:1, ease:Elastic.easeOut.config(1, 0.4)});
                TweenMax.to($('footer'),0.5,{display:'block', opacity:1});
            },
            hide : function(){
                TweenMax.to($('footer'),0.5,{opacity:0});
                TweenMax.to(Interface.hdr.$logo,0.3,{scale:0, opacity:0, onComplete:function(){
                    $('header').hide();
                    $('footer').hide();
                }});
                this.hideBt();
            },
            hideBt : function(){
                TweenMax.to(Interface.hdr.$bt,0.3,{x:-50, opacity:0, onComplete:function(){
                    Interface.hdr.$bt.hide();
                }});
                this.active = false;
            },
            showBt : function(){
                Interface.hdr.$bt.show();
                TweenMax.to(Interface.hdr.$bt,0.5,{x:0, opacity:1, ease:Elastic.easeOut.config(1, 0.4)});
                this.active = false;

            }
        }

    };



    var Party = {
        isPlaying : false,
        capsPerTurn : 1,
        lives : 60,
        create : function(){
            Viensla.generateCaps();

            Viensla.score = Player.score = Viensla.launched = Player.launched = 0;
            Viensla.lives = Player.lives = Party.lives;

            Party.isPlaying = true;

            this.resetStocks();

            if(!CAPS.solo){
                Viensla.isPlaying = Game.role == 'Player';
                Player.isPlaying = Game.role == 'Host';
            }else{
                Viensla.isPlaying = false;
                Player.isPlaying = true;
            }

            $vlpart.fadeIn(function(){
                Party.setLife();
            });

            $plpart.fadeIn();

            Player.generateCaps();

            if(!Interface.txtoRdy)
                Interface.textoBox.init();

            setTimeout(function(){
                $('#game-loader .tiny-loader').addClass('fade');
                setTimeout(function(){
                    $('#game-loader').addClass('fade');
                    setTimeout(function(){
                        $('#game-loader').remove();
                        animTypo($startTypo);
                        Party.setTurn();
                        Snds.fadInSd('ambiance');
                        Snds.playSd('open');
                    }, 500);
                }, 1000);
            }, 2000);
        },

        resetParty: function(){
            var $resetC = $('#reset-party-c');

            Viensla.score = Player.score = Viensla.launched = Player.launched = 0;
            Viensla.lives = Player.lives = Party.lives;
            Player.drunked = 1;

            Party.isPlaying = true;

            Party.setLife();

            if(!CAPS.solo){
//            Viensla.isPlaying = Game.role == 'Player';
//            Player.isPlaying = Game.role == 'Host';
            }else{
                Viensla.isPlaying = false;
                Player.isPlaying = true;
            }

            Party.setTurn();

            TweenMax.to($resetC, 1, {opacity:0, onComplete:function(){
                TweenMax.set($resetC,{display:'none'});
                animTypo($startTypo);
                Snds.playSd('open');
                TweenMax.set($resetC.find('h4'),{scale:0.5, opacity:0, height:0});
            }});

        },
        setTurn:function(){
            if(Player.isPlaying){
                $('#versus-bar #cursor').removeClass().addClass('lf');
                TweenMax.to($('#you-turn'), 1.5, {x:40, opacity:1, ease:Elastic.easeOut.config(1, 0.4),  delay:1.8});
                TweenMax.to($('#you-turn'), 1, {x:-170, opacity:0, ease:Elastic.easeOut.config(1, 0.4), delay:4.5});

                if(Player.totalLaunched < 3)
                    Interface.capTuto.show();

            }else {
                $('#versus-bar #cursor').removeClass().addClass('rg');
            }
        },

        vlplay : function(){

            if(this.isPlaying && CAPS.solo){
                if(Viensla.launched < Party.capsPerTurn && !Player.isPlaying){

                    $vlpart.find('.capsstock span').eq(Viensla.launched).removeClass().addClass('animated zoomOut');

                    Viensla.isPlaying = true;
                    Player.isPlaying = false;
                    Viensla.launchCaps();
                    Viensla.launched++;
                    Viensla.totalLaunched++;

                    Player.isPlaying = true;
                    Player.launched = 0;
                    Viensla.isPlaying = false;


                    Party.setTurn();
                    this.resetStocks();

                }
            }
        },

        plplay : function(){
            if(this.isPlaying){

                if(Player.launched < Party.capsPerTurn && !Viensla.isPlaying){
                    globalDirection = 1;
                    create_caps('pl');
                    Player.isPlaying = true;
                    Viensla.isPlaying = false;
                }
            }
        },

        vlcaps : function(){
            if(this.isPlaying){
                Viensla.isPlaying = false;
                Player.isPlaying = true;
                Viensla.score++;
                Player.drunked += 2;
                Player.lives -= 10;

                this.animCaps();

                if(Viensla.launched < Party.capsPerTurn-1){

                    setTimeout(function(){
                        Party.resetStocks();
                    }, 2000);
                }
                setTimeout(function(){
                    Player.generateCaps();
                }, 2000);

                Party.setLife();
            }
        },


        plcaps : function(){
            var txtos = [2, 4, 5, 7];

            if(this.isPlaying){
                Player.score++;
                Viensla.lives -= 10;
                Player.isPlaying = false;
                Viensla.isPlaying = true;

                Game.Player.playerCaps();

                if(Viensla.lives==0 && Player.lives==Party.lives){
                    animTypo($perfectTypo);
//                this.doPerfectBalls();
//                perfectGift();
                }else{
                    this.animCaps();

                }
                setTimeout(function(){
                    Viensla.generateCaps();
                }, 2000);
                Party.setLife();

            }

        },

        resetStocks : function(){
            if(this.isPlaying){
                $('.capsstock span.zoomOut').removeClass('zoomOut').addClass('zoomIn');
                Viensla.launched = 0;
                Player.launched = 0;
            }

            if(Player.drunked > 11){
                Player.drunked -= 2;
            }
        },

        setLife : function(){
            if(this.isPlaying){
                var pctPlLife = Math.round(Player.lives / Party.lives * 100);
                var pctVlLife = Math.round(Viensla.lives / Party.lives * 100);

                $plpart.find('.life').height(pctPlLife+"%");
                $vlpart.find('.life').height(pctVlLife+"%");

                if(pctPlLife <= 0 || pctVlLife <= 0){
                    Party.isPlaying = false;
                    setTimeout(function(){

                        if(pctPlLife <= 0){
                            animTypo($loseTypo, 800);
                            Snds.playSd('lose');
                            setTimeout(Snds.playSd('clairon'), 3000);
                            $('#reset-party-c').removeClass().addClass('looser').find('h3').text('Une petite revanche ?');

                            if(CAPS.solo){
                                Viensla.imprecision += 2;
                            }
                        }else if(pctVlLife <= 0){
                            animTypo($winTypo, 800);
                            Snds.playSd('win');
                            $('#reset-party-c').removeClass().addClass('winner').find('h3').text("On va pas s'arrêter en si bon chemin !");
                            setTimeout(Snds.playSd('applause'), 3000);
                            Viensla.imprecision = Math.max(0, Viensla.imprecision - 2);
                        }

                        TweenMax.to($('#reset-party-c'), 1, {opacity:1, display:'block', delay:3});

                    }, 1600);
                }
            }
        },
        animCaps : function(){
            animTypo($capsTypo);
        }
    };






    function animTypo($el, pauseDelay){
        if(typeof pauseDelay == 'undefined')
            pauseDelay = 300;

        var delay = 400;
        $el.attr('class', 'capsIn1');
        setTimeout(function(){
            $el.attr('class', 'capsIn2');
            setTimeout(function(){
                $el.attr('class', 'capsIn3');
                setTimeout(function(){
                    $el.attr('class', '');
                },delay);
            },delay+pauseDelay);
        },delay);
    }

    var FPS = function(){
        var performance = performance || false;
        var now = ( performance && performance.now ) ? performance.now.bind( performance ) : Date.now;
        var startTime = now(),
            prevTime = startTime;
        var frames = 0;
        var fps= 0;
        var globalFps = 0;
        var med=0;
        var tot = 0;

        return {
            begin : function(){
                startTime = now();
            },
            end : function(){
                var time = now();

                frames++;

                if ( time > prevTime + 1000 ) {

                    fps = Math.round( ( frames * 1000 ) / ( time - prevTime ) );
                    prevTime = time;
                    tot++;
                    globalFps = globalFps+fps;
                    med = globalFps/tot;
                    frames = 0;
                }
                return time;
            },
            update: function(){
                startTime = this.end();
                return {fps:fps, med:med};
            }
        }
    };



    var darkbrown = 0xbd9442,
        mediumbrown = 0xaf843e,
        lightbrown = 0xf9d37f,
        lightestbrown = 0xffd888,
//    brown = 0xf2b554,
        brown = 0xf3b654,
        tablebrown = 0xf4bd61,
        tablefootbrown = 0xd2ac55,
        tapisbrown = 0xaf843e;

    var cblue = 0x67AAC1;
    var cyellow = 0xF7D443;
    var cgreen = 0x78AD60;
    var cred = 0xC1676A;
    var corange = 0xFCC025;
    var ptpgrey = 0x595556;
    var ptpyellow = 0xfde772;




    var beerColors = {
        chimey : 0x2e7cff,
        foster : 0x163282,
        lef : 0xfacc14,
        pelle : 0xf24141,
        chouffe : 0x4d9c40,
        ptp : 0xf58b31
    };

    var shadowColors = {
        chimey : 0x317ad3,
        foster : 0x142e66,
        lef : 0xedc418,
        pelle : 0xd84848,
        chouffe : 0x5e9147,
        ptp : 0xea843f
    };




    capCollision = function ( collided, linearVelocity, angularVelocity, other ){

        var capPlayed = this;
        capPlayed.collisions++;

        if(capPlayed.floating) return;

        var collision = collided.name;


        var velocity = Math.abs(linearVelocity.x) + Math.abs(linearVelocity.y) + Math.abs(linearVelocity.z);

        switch(collision){
            case 'level':
                if(capPlayed.name == 'player'){
                    if(velocity > 60)
                        Snds.playSd('simpletap2');
                }
                break;
            case 'tapis':
                if(velocity > 60)
                    Snds.playSd('simpletap1');
                break;
            case 'floor':
                if(velocity > 60)
                    Snds.playSd('simpletap3');
                break;
            case 'vlCap':
                if(capPlayed.name == 'player'){
                    collided.collided = true;
                    collided.__dirty_postion = true;
                    Snds.playSd('capcap');
                }
                break;
            case 'plCap':
                if(capPlayed.name == 'viensla'){
                    collided.collided = true;
                    collided.__dirty_postion = true;
                    Snds.playSd('capcap');
                }
                break;
            case 'vlBottle':
                if(velocity > 60)
                    Snds.playSd('clink');
                break;
            case 'plBottle':
                if(velocity > 60)
                    Snds.playSd('clink');
                break;
            case '':
                break;
        }
    };




    function create_caps(who){
        var randomCaps = Math.random() > 0.8;
        var mass = 2;

        if(typeof who == 'undefined'){
            who = 'pl';
        }


        var cap_mat;
        if(who == 'pl'){
            cap_mat = Player.capmat.clone();
        }else{
            cap_mat = Viensla.capmat.clone();
        }

        cap_mat.side = 2;


        ball = new Physijs.CylinderMesh(geo_caps, cap_mat, mass, {friction : 1, restitution : 0.5});

        ball.stopGravity = function(){
            var cap = this;
            var intv;
            var i=0;
            setTimeout(function(){
                cap.material.materials[0].transparent = true;
                cap.material.materials[1].transparent = true;
                intv = setInterval(function(){
                    cap.material.materials[0].opacity = i%2 == 0 ? 0 : 1;
                    cap.material.materials[1].opacity = i%2 == 0 ? 0 : 1;
                    i++;
                    if(i == 10){
                        clearInterval(intv);
                        cap.material.materials[0].opacity = 1;
                        cap.material.materials[1].opacity = 1;
                        scene.remove(cap);
                    }
                }, 200-i);
            }, 4000);
        };
        ball.scale.set(capModelscale,capModelscale,capModelscale);


        ball.collisions = 0;
        ball.addEventListener('collision', capCollision);

        var sub = new Physijs.CylinderMesh(
            new THREE.CylinderGeometry(1.5, 1.5, 0, 32, 32 ),
            new THREE.MeshLambertMaterial({
                color: ball.material.materials[1].color,
                transparent : true,
                opacity:1
            })
            ,0);
        sub.position.x = 0;
        sub.position.y = 0.3;
        sub.position.z = 0;

        ball.add(sub);

        var collisionSphere = new Physijs.CylinderMesh(
            new THREE.SphereGeometry(2, 32),
            new THREE.MeshLambertMaterial({
                color: 0xffffff,
                transparent : true,
                opacity:0.6
            })
            ,0);


//    ball.add(collisionSphere);
        ball.position.y = 50;
        ball.position.x = 0;
        ball.position.z = playerDistance * globalDirection;
        ball.castShadow = true;
        ball.receiveShadow = true;

        scene.add(ball);
        elements.push(ball);

        playedCaps = ball;

        playedCaps.floating = true;

        playedCaps.name = who == 'vl' ?  'viensla' : 'player';


        if(elements.length > 4){
            var last = elements[0];
            last.stopGravity();
            elements.splice(0, 1);
        }

    }





    var power = 0,
        speedbar = 2,
        powerDir = speedbar,
        strengh = 6,
        playerstrengh = 5;


    function setPower(){
        var powerInterval;

        powerInterval = setInterval(function(){
            if(holdingDown){

                power += powerDir;

                if(power > 100){
                    powerDir = -speedbar;
                }

                if(power < 0){
                    powerDir = +speedbar;
                }

                TweenMax.set($('.powerbar .bar'), {height:power+'%'});
//            $('.powerbar .bar').height(power+'%');
            }
        }, 10 + Viensla.lives/10 );
    }






    initEventHandling = (function() {
        var projector, ray, intersection,
            handleMouseDown, handleMouseMove, handleMouseUp,
            launchVector = new THREE.Vector3,
            _vector = new THREE.Vector3,
            _angVector = new THREE.Vector3;


        handleMouseDown = function( evt ) {

            if(!playedCaps) return;

            holdingDown = true;
//        launchVector.set(1,20, -100);

            power = 0;
            $('.powerbar').fadeIn();



        };

        handleMouseMove = function( evt ) {
            var mouseX = evt.clientX,
                mouseY = evt.clientY,
                realpos = {};


            $('.powerbar').css({left:mouseX+50, top:mouseY-50});

            mouse3D.set(
                ( mouseX / window.innerWidth ) * 2 - 1,
                - ( mouseY / window.innerHeight ) * 2 + 1.07 ,
                1 );
            mouse3D.unproject(camera);
            dir = mouse3D.sub( camera.position ).normalize();
            distance = - camera.position.z / dir.z;
            realpos = camera.position.clone().add( dir.multiplyScalar(distance/2) );
            realpos.z = playerDistance*globalDirection;


            if(!playedCaps) return;

            DCMP = realpos;


        };

        handleMouseUp = function( evt ) {

            if(!playedCaps) return;


            holdingDown = false;

            playedCaps.__dirtyPosition = true;
            playedCaps.floating = false;

            var rdms = [
                Math.random()*3+4,
                Math.random()*3+4,
                Math.random()*3+4
            ];

            _vector.set( 1, 1, 1 );
            _angVector.set( rdms[0], rdms[1], rdms[2]);

            playedCaps.setAngularFactor( _vector );
            playedCaps.setLinearFactor( _vector );
            launchVector.set(1,1, -power*playerstrengh*globalDirection);
            playedCaps.setLinearVelocity( launchVector );
            playedCaps.setAngularVelocity( _angVector );

            playedCaps.position.copy(DCMP);

            playedCaps = null;

            if(!CAPS.solo){
                Game.Player.playerLaunch({x : DCMP.x, y : DCMP.y, z :-DCMP.z, pwr:power, rdms:rdms});
            }else{
                setTimeout(function(){
                    Party.resetStocks();
                    Party.vlplay();
                }, 3000);
            }
            power = 0;

            $('.powerbar').fadeOut();

            Player.launched++;
            Player.totalLaunched++;

            Player.isPlaying = false;
            Viensla.isPlaying = true;
            Party.setTurn();

            Party.resetStocks();

        };

        return function() {
            renderer.domElement.addEventListener( 'mousedown', handleMouseDown );
            renderer.domElement.addEventListener( 'mousemove', handleMouseMove );
            renderer.domElement.addEventListener( 'mouseup', handleMouseUp );
        };
    })();

    var playerCamera = {}, vlCamera = {}, camera;
    var lookat;



    var VIEW_ANGLE = 75,
        ASPECT = WIDTH / HEIGHT,
        NEAR = 0.1,
        FAR = 10000;

    function create_camera(){


        playerCamera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);
        playerCamera.initialpos = new THREE.Vector3( 0, 160, 165 );
        playerCamera.position.set(playerCamera.initialpos.x, playerCamera.initialpos.y, playerCamera.initialpos.z);
        playerCamera.lookAt(scene);
        scene.add(playerCamera);

        vlCamera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);
        vlCamera.initialpos = new THREE.Vector3( 0, 210, -170 );
        vlCamera.position.set(vlCamera.initialpos.x, vlCamera.initialpos.y, vlCamera.initialpos.z);
        vlCamera.lookAt(scene);
        scene.add(vlCamera);


        lookat = new THREE.Vector3(0,50,-100);

        camera = playerCamera;



        mouse = {x : 0, y : 0};

        document.addEventListener('mousemove', function(event){
            mouse.x	= (event.clientX / window.innerWidth ) - 0.5;
            mouse.y	= (event.clientY / window.innerHeight) - 0.5;

            camera.position.x += (mouse.x * 20 - camera.position.x) * (0.3*3) + camera.initialpos.x;
            camera.position.y += (mouse.y * 10 - camera.position.y) * (0.5*3) + camera.initialpos.y+80;
        }, false);
    }

    function change_camera(){
        if(camera == playerCamera){
            camera = vlCamera;
            camera.initialpos = vlCamPos;
            lookatobj = Player.bottle;
            globalDirection = -1;

        }else{
            camera = playerCamera;
            camera.initialpos = playerCamPos;
            lookatobj = Viensla.bottle;
            globalDirection = 1;


        }
    }


    var CAPS = {
        camera : null,
        solo : false,
        quality:'high'
    };

    var quality = 1, lastQuality = 1;

    var container, scene, renderer, light, ball, plane, bottle, bottlecaps, axes, initEventHandling, initScene;
    var WIDTH, HEIGHT, planeWIDTH, planeHEIGHT;
    var fps, fpsStat;
    var elements = [], playedCaps = null, mouse_position = new THREE.Vector3, block_offset = new THREE.Vector3, _i, _v3 = new THREE.Vector3, intersect_plane, lookatobj, pilone, mouse,
        mouse3D = new THREE.Vector3, vlPlayedCaps = null;

    var _nullVector = new THREE.Vector3(0,0,0), DCMP  = new THREE.Vector3(0,0,0);
    var _natVector = new THREE.Vector3(1,1,1);

    var onRenderFcts= [];

    var lastTimeMsec= null;

    var capsYpos = 110;

    var movingCaps = null;

    var clock = new THREE.Clock(), dir, distance;

    var holdingDown = false;

    var $capsTypo,$startTypo, $winTypo, $loseTypo, $perfectTypo;


    Physijs.scripts.worker = '/js/physijs/physijs_worker.js';
    Physijs.scripts.ammo = 'ammo.js';
//Physijs.scripts.ammo = 'cannon.js';


    WIDTH = window.innerWidth;
    HEIGHT = window.innerHeight;

    var playerDistance = 100;

    var globalDirection = 1;

    var capModelscale = 1.6;



    var texture;

    var composer;





    var DPR = window.devicePixelRatio || 1;


    initScene = function() {

        container = document.getElementById('viewport');

        scene = new Physijs.Scene();
        scene.setGravity(new THREE.Vector3( 0, -80, 0 ));
//    scene.fog = new THREE.Fog( 0x050505, 2000, 3500 );

        renderer = new THREE.WebGLRenderer({
            antialias: true,
            alpha : true,
            precision:"lowp",
            devicePixelRatio: DPR
        });
        renderer.setPixelRatio( DPR );

        if(DPR > 1){
            renderer.setViewport( 0, 0, WIDTH/2, HEIGHT/2 );
            renderer.setSize(WIDTH/1.5, HEIGHT/1.5);
            $(renderer.domElement).css({width:WIDTH, height:HEIGHT});
        }else{
            renderer.setSize(WIDTH, HEIGHT);
            renderer.setViewport( 0, 0, WIDTH, HEIGHT);
        }
        renderer.shadowMapEnabled = false;
        renderer.shadowMapSoft = false;
        renderer.shadowMapType = THREE.PCFShadowMap;
        renderer.shadowMapAutoUpdate = false;
        renderer.gammaInput = true;
        renderer.gammaOutput = true;

//    renderer.setClearColor( scene.fog.color, 1 );
        container.appendChild(renderer.domElement);

        create_camera();
        create_lights();
        create_table();


        Viensla.initialize();
        Player.initialize();

        lookatobj = Viensla.bottle;
        scene.simulate();
        initEventHandling();

        create_caps_group();

        $plpart.addClass(Game.Player.caps);
        $('#versus-bar .pl').addClass(Game.Player.caps);
        Player.capmat = caps_material[Game.Player.caps].clone();
        Player.stickermat = sticker_materials[Game.Player.caps].clone();
        Player.bottle.material.color = Player.capmat.materials[1].color;
        Player.changeSticker();
        Viensla.changeBottle(Game.Enemy.caps);

        fpsStat = new FPS();

        Party.create();
        render();
        setPower();
    }

    function render() {
        if(Party.isPlaying){
            if( (Viensla.bottlecaps.position.y <= Viensla.bottle.position.y
                || Viensla.bottlecaps.position.y > Viensla.bottle.position.y + 35
                || Viensla.bottlecaps.position.x > Viensla.bottle.position.x + 7
                || Viensla.bottlecaps.position.x < Viensla.bottle.position.x - 7
                || Viensla.bottlecaps.position.z > Viensla.bottle.position.z + 7
                || Viensla.bottlecaps.position.z < Viensla.bottle.position.z - 7)
                && !Viensla.bottlecaps.capsed){
                Viensla.bottlecaps.capsed = true;
                Viensla.bottlecaps.collided = false;
                Party.plcaps();
            }


            if((Player.bottlecaps.position.y <= Player.bottle.position.y
                || Player.bottlecaps.position.y > Player.bottle.position.y + 35
                || Player.bottlecaps.position.x > Player.bottle.position.x + 7
                || Player.bottlecaps.position.x < Player.bottle.position.x - 7
                || Player.bottlecaps.position.z > Player.bottle.position.z + 7
                || Player.bottlecaps.position.z < Player.bottle.position.z - 7)
                && !Player.bottlecaps.capsed){
                Player.bottlecaps.capsed = true;
                Player.bottlecaps.collided = false;

                if(CAPS.solo) Party.vlcaps();
            }
        }


        if(playedCaps){
            if(Player.isPlaying && !Viensla.isPlaying){
                playedCaps.position.copy(DCMP);
            }
        }

        if(Viensla.cursor && Viensla.liveVector){
            Viensla.cursor.__dirtyPosition = false;
            Viensla.cursor.position.copy(Viensla.liveVector);
        }

//    if(holdingDown){
//        setPower();
//    }

        scene.simulate(undefined, 2);

        camera.lookAt(lookat);

        var time = Date.now() * 0.0005;

        drunk_effect(time);

        if( Math.sin( time*2 ) > 0.5){
            pointlightbar.animeLight();
        }

        if(phone){
            var phonePos = toScreenPosition(phone, camera);
        }
        TweenLite.set($('#txto-rc'),{y:phonePos.y, x:phonePos.x});

        animateDust(time/10);

        renderer.render(scene, camera);

        fps = fpsStat.update();

        quality = fps.med/60;

        if(Math.abs(quality-lastQuality) > 0.1){
            lastQuality = quality;
            onWindowResize();
        }

//    setTimeout( function() {
        requestAnimationFrame(render);
//    }, 1000 / 30 );


    }

    function animateDust(time){
        for ( var i = 0; i < dust.length; i ++ ) {
            var object = dust[ i ];
            if ( object instanceof THREE.PointCloud ) {
                object.rotation.y = time * ( i < 4 ? i + 1 : - ( i + 1 ) );
            }
        }
    }


    function drunk_effect(time){
        camera.initialpos.x += Math.sin( time*2 ) * Player.drunked/70;
        camera.initialpos.y += Math.cos( time*2 ) * Player.drunked/70;
        camera.initialpos.z += Math.sin( time*2 ) * Player.drunked/70;
        camera.position.x += (mouse.x * 20 - camera.position.x) * (0.3*3) + camera.initialpos.x;
        camera.position.y += (mouse.y * 10 - camera.position.y) * (0.5*3) + camera.initialpos.y+80;
    }




    CAPS.launchGame = function(){
        loadBottleTools();

        window.addEventListener( 'resize', onWindowResize, false );

        $plpart.find('h3 span').text(Game.Player.name);
        $vlpart.find('h3 span').text(Game.Enemy.name);
        $('#reset-party-c h4').find('span').text(Game.Enemy.name);



        $('#quality').click(function(){
            $(this).toggleClass('low');
            if($(this).hasClass('low'))
                CAPS.quality = 'low';
            else
                CAPS.quality = 'high';
            onWindowResize();
        });

        for(var i =0; i < Party.capsPerTurn; i++){
            $('.capsstock').append('<span class="animated zoomIn"></span>');
        }

        $plpart.find('.capsstock span').click(function(){
            if(!Viensla.isPlaying){
                $(this).removeClass().addClass('animated zoomOut');
                Party.plplay();

                if(Player.totalLaunched < 4)
                    Interface.capTuto.hide();
            }
        });
    };


    function onWindowResize( event ) {
        WIDTH = window.innerWidth;
        HEIGHT = window.innerHeight;
        if(DPR > 1){
            renderer.setViewport( 0, 0, WIDTH/2, HEIGHT/2 );
            renderer.setSize(WIDTH/1.5, HEIGHT/1.5);
            $(renderer.domElement).css({width:WIDTH, height:HEIGHT});
        }else{
            renderer.setSize(WIDTH, HEIGHT);
            renderer.setViewport( 0, 0, WIDTH, HEIGHT);
        }


        camera.aspect = WIDTH / HEIGHT;
        camera.updateProjectionMatrix();
        Interface.resize();
    }



    function toScreenPosition(obj, camera)
    {
        var vector = new THREE.Vector3();

        var widthHalf = 0.5*WIDTH;
        var heightHalf = 0.5*HEIGHT;

        obj.updateMatrixWorld();
        vector.setFromMatrixPosition(obj.matrixWorld);
        vector.project(camera);

        vector.x = ( vector.x * widthHalf ) + widthHalf;
        vector.y = - ( vector.y * heightHalf ) + heightHalf;

        return {
            x: Math.round(vector.x),
            y: Math.round(vector.y)
        };

    };

    var $loader = $('#loader'),
        $tinyLoader = null,
        $wrapper = $('#wrapper'),
        $ajaxC = $('#site-content');
    var parts = ['welcome', 'multi', 'wait', 'pickname', 'pickcaps', 'wait', 'gamearea'];
    var i = 0,
        step = 1,
        loadFinish = false,
        delay = 450;
    var loaderInterval,
        tinyLoadInterval;
    var loadImg = new Image();
    var touch = Modernizr.touch;

    console.log(touch);

    var hash = location.hash ? location.hash.replace('#', '') : null;
    console.log(hash);

    var curUrl = location.href.replace(location.hash,'');

    loadImg.src = "images/sprites/sprite_load.png";



    $(loadImg).load(function(){
        loaderInterval = setInterval(function(){
            $loader.attr('class', 'loadIn'+step);
            step = step < 5 ? step+1 : 1;
            setTimeout(function(){
                if(loadFinish && step == 1){
                    $('#loading').fadeOut();
                    clearInterval(loaderInterval);
                }
            }, 10)

        }, delay);
//        loadPart();
    });

    if(touch){
        $.ajax({
            url:curUrl + 'mobile.html',
            success : function(data){
                $ajaxC.append(data);
                $('#touch-screen').css({height:window.innerHeight, width:window.innerWidth, lineHeight: window.innerHeight+'px'});
                setTimeout(function(){ loadFinish = true;}, 1);
            }
        });
    }else{
        checkWebGL();
    }


    function loadPart(){
        $.ajax({
            url:curUrl + parts[i] +'.html',
            success : function(data){
                $ajaxC.append(data);
                i++;
                if(i == parts.length){
                    Interface.init();

                    if(hash){
                        Interface.initMulti(hash);
                    }
                    setTimeout(function(){
                        loadFinish = true;
                        $tinyLoader = $('.tiny-loader div');
                        tinyLoadInterval = setInterval(function(){
                            $tinyLoader.attr('class', 'loadIn'+step);
                            step = step < 5 ? step+1 : 1;
                        }, delay);
                    }, 1);
                }else{
                    loadPart();
                }
            }
        });
    };


    function checkWebGL() {
        var b = BD;
        b.init();
        var canvas = document.getElementById("iswebgl");
        var gl = false;
        canvas.width = 1;
        canvas.height = 1;

        var experimental = false;

        try { gl = canvas.getContext("webgl"); }
        catch (x) { gl = null; }

        if (gl == null) {
            try { gl = canvas.getContext("experimental-webgl"); experimental = true; }
            catch (x) { gl = null; }
        }

        $('body').addClass(b.browser.toLowerCase());

        $(canvas).remove();

        if (gl) {
            console.log("WebGL presents !");
            loadPart();
        } else{
            // Do we know this browser?
            if (b.browser != "unknown") {
                $.ajax({
                    url:curUrl + 'updatebrowser.html',
                    success : function(data){
                        $ajaxC.append(data);

                        $('#browser-screen').css({height:window.innerHeight, width:window.innerWidth, lineHeight: window.innerHeight+'px'});



                        if(b.browser == 'Safari' && b.version > 6){
                            $('#browser-message').html("WebGL ne semble pas actif sur votre navigateur ! <br/> Pour l'activer sur Safari : " +
                                "Ouvrez le menu « Safari » et sélectionnez « Préférences ».<br/>"+
                                "Cliquez sur l’onglet « Avancés ».<br/>"+
                                "Cochez le champ « Afficher le menu Développement dans la barre des menus ».<br/>"+
                                "Ouvrez le menu « Développement » et cliquez sur « Activer WebGL ».<br/>");
                        }else{
                            $('#browser-message').html("Pour jouer au Caps, il faut mettre à jour ton navigateur !<br/>Ou squatter l'ordi de ton pote !");
                        }

                        setTimeout(function(){
                            loadFinish = true;
                        }, 1000);
                    }
                });
            }
        }
    };





});