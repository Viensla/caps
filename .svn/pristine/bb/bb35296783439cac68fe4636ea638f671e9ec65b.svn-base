
planeWIDTH = 180;
planeHEIGHT = 800;


var tableSurfaceDim = [160, 5, 30];
var tablefootSurfaceDim = [150, 55, 2];
var level, _floor, _tapis, _tablefoot, _table, _wall;
function create_table(){

    //Set Level group
    level = new Physijs.BoxMesh(
        new THREE.BoxGeometry( 1, 1, 1 ),
        new THREE.MeshLambertMaterial({
                color: ptpgrey
        }),0
    );
    level.position.x = 0;
    level.position.y = 0;
    level.position.z = 0;
    level.castShadow = false;
    level.receiveShadow = true;
    level.name = 'level';



    //Add floor to level
    _floor = new Physijs.BoxMesh(
        new THREE.CylinderGeometry(1000, 1000, 30, 16),
        new THREE.MeshPhongMaterial({
            color: ptpyellow
        }),0
    );
//    _floor.rotation.x = Math.PI/2;
    _floor.position.x = 0;
    _floor.position.y = -1;
    _floor.position.z = 0;
    _floor.castShadow = true;
    _floor.receiveShadow = true;
    _floor.name = 'floor';

    level.add(_floor);


    //Add Wall to level
    var wall_texture = THREE.ImageUtils.loadTexture('images/fond.png');

    _wall = new Physijs.BoxMesh(
        new THREE.BoxGeometry(912, 235, 10),
        new THREE.MeshPhongMaterial({
            map:wall_texture,
            transparent:true,
            opacity:1
        }),
        0
    );
    _wall.position.x = 0;
    _wall.position.y = 130;
    _wall.position.z = -330;
    _wall.castShadow = true;
    _wall.receiveShadow = true;

    level.add(_wall);

     wall_texture = THREE.ImageUtils.loadTexture('images/fond_2_bar.png');
    _wall = new Physijs.BoxMesh(
        new THREE.BoxGeometry(1012, 285, 10),
        new THREE.MeshPhongMaterial({
            map:wall_texture,
            transparent:true,
            opacity:1
        }),
        0
    );
    _wall.position.x = 0;
    _wall.position.y = 130;
    _wall.position.z = -430;
    _wall.castShadow = true;
    _wall.receiveShadow = true;


    level.add(_wall);



    _tapis = new Physijs.BoxMesh(
        new THREE.BoxGeometry(planeWIDTH, planeHEIGHT, 35),
        new THREE.MeshPhongMaterial({
            color: cyellow
        }), 0
    );
    _tapis.rotation.x = Math.PI/2;
    _tapis.position.x = 0;
    _tapis.position.y = 0;
    _tapis.position.z = 0;
    _tapis.castShadow = false;
    _tapis.receiveShadow = true;
    _tapis.name = 'tapis';

    scene.add(_tapis);



    //Add table foots


    var _tablefoot_geometry = new THREE.BoxGeometry(tablefootSurfaceDim[0], tablefootSurfaceDim[1]+8, tablefootSurfaceDim[2]);

    _tablefoot = new Physijs.BoxMesh(
        _tablefoot_geometry,
        new THREE.MeshPhongMaterial({
            color: cblue
        })
    , 0);


    var _tablefoot_outlines = new Physijs.BoxMesh(
        _tablefoot_geometry,
        new THREE.MeshPhongMaterial({
            color: 0x000000
        })
    , 0);
    _tablefoot_outlines.position.z = -0.5;
    _tablefoot_outlines.scale.set(1.01,1.05,1.05);
    _tablefoot.add(_tablefoot_outlines);

    _tablefoot.castShadow = true;
    _tablefoot.receiveShadow = true;



    _tablefoot.rotation.x = 0.3;
    _tablefoot.position.x = 0;
    _tablefoot.position.y = tablefootSurfaceDim[1]-6.3;
    _tablefoot.position.z = -90;

    level.add(_tablefoot);



//
//    _tablefoot = new Physijs.BoxMesh(
//        new THREE.BoxGeometry(tablefootSurfaceDim[0], tablefootSurfaceDim[1]-10, tablefootSurfaceDim[2]),
//        new THREE.MeshPhongMaterial({
//            color: cgreen
//        }), 0
//    );
//    _tablefoot.position.x = 0;
//    _tablefoot.position.y = tablefootSurfaceDim[1]-10;
//    _tablefoot.position.z = 110;
//    _tablefoot.castShadow = true;
//    _tablefoot.receiveShadow = true;
//
//    level.add(_tablefoot);

    //Add table

    var _table_geometry = new THREE.BoxGeometry(tableSurfaceDim[0], tableSurfaceDim[1], tableSurfaceDim[2]);

    _table = new Physijs.BoxMesh(
        _table_geometry,
        new THREE.MeshPhongMaterial({
            color: 0xffffff
        }), 0
    );


    var _table_outlines = new Physijs.BoxMesh(
        _table_geometry,
        new THREE.MeshPhongMaterial({
            color: 0x000000
        })
        , 0);
    _table_outlines.position.z = -2;
    _table_outlines.position.y = -0.5;
    _table_outlines.scale.set(1.01,1.05,1.1);

    _table.add(_table_outlines);



    _table.position.x = 0;
    _table.position.y = tablefootSurfaceDim[1] +tablefootSurfaceDim[1]/2 ;
    _table.position.z = -90;
    _table.castShadow = true;
    _table.receiveShadow = true;

    level.add(_table);

    _table = new Physijs.BoxMesh(
        new THREE.BoxGeometry(tableSurfaceDim[0]+100, tableSurfaceDim[1], tableSurfaceDim[2]),
        new THREE.MeshPhongMaterial({
            color: 0xffffff
        }),
    0);

    _table_outlines = new Physijs.BoxMesh(
        new THREE.BoxGeometry(tableSurfaceDim[0]+100, tableSurfaceDim[1], tableSurfaceDim[2]),
        new THREE.MeshPhongMaterial({
            color: 0x000000
        }),
    0);

    _table_outlines.position.z = -0.5;
    _table_outlines.position.y = -0.2;
    _table_outlines.scale.set(1.01, 1, 1);

    _table.add(_table_outlines);

    _table.position.x = 0;
    _table.position.y = tablefootSurfaceDim[1]-10 +tablefootSurfaceDim[1]/2 ;
    _table.position.z =  110;
    _table.castShadow = true;
    _table.receiveShadow = true;

    level.add(_table);

    //Add Wall to level
    var phone_t = new THREE.MeshPhongMaterial({
        map: THREE.ImageUtils.loadTexture('images/phone_face.png')
    });
    var transparent_side =  new THREE.MeshPhongMaterial({
        color:0xfcd625
    });
    var phone_materials = [
        transparent_side,
        transparent_side,
        phone_t,
        transparent_side,
        transparent_side,
        transparent_side
    ];
    var _phone = new Physijs.BoxMesh(
        new THREE.BoxGeometry(10, 1, 14),
        new THREE.MeshFaceMaterial(phone_materials),
        0
    );
    _phone.position.x = -50;
    _phone.position.y = 3;
    _phone.position.z = -5;
    _phone.rotation.y = - 0.3;
    _table.add(_phone);


    scene.add(level);



    // material texture
    var texture = new THREE.Texture( generateTexture() );
    texture.needsUpdate = true; // important!

    // material
    var material = new THREE.MeshBasicMaterial( {
        color: 0xffffff,
        shininess: 10,
        transparent:true,
        opacity:0.2,
        map: texture,
        side : 2
    } );


    var _spot_fake = new THREE.Mesh(
        new THREE.CylinderGeometry(
            20, 150, 400, 4
        ),
        material
        , 0);


    _spot_fake.scale.set(0.3,1, 1);
    _spot_fake.rotation.y = Math.PI/2;
    _spot_fake.receiveShadow = false;
    _spot_fake.position.x = 0;
    _spot_fake.position.y = 150;
    _spot_fake.position.z = -110;
    scene.add(_spot_fake);

    // SKYDOME

    var hemiLight = new THREE.HemisphereLight( 0xffffff, 0xffffff, 0.8 );
    hemiLight.color.setHex( 0x3f3f3f );
    hemiLight.groundColor.setHSL( 0.2,0.2,0.2 );
    hemiLight.position.set( 0, 300, 0 );
    var vertexShader = document.getElementById( 'vertexShader' ).textContent;
    var fragmentShader = document.getElementById( 'fragmentShader' ).textContent;
    var uniforms = {
        topColor: 	 { type: "c", value: new THREE.Color( cyellow ) },
        bottomColor: { type: "c", value: new THREE.Color( ptpyellow ) },
        offset:		 { type: "f", value: 10 },
        exponent:	 { type: "f", value: 0.6 }
    }
    uniforms.topColor.value.copy( hemiLight.color );

    scene.fog.color.copy( uniforms.bottomColor.value );

    var skyGeo = new THREE.SphereGeometry( 900, 4, 15 );
    var skyMat = new THREE.ShaderMaterial( { vertexShader: vertexShader, fragmentShader: fragmentShader, uniforms: uniforms, side: THREE.BackSide } );
    var sky = new THREE.Mesh( skyGeo, skyMat );
    scene.add( sky );


//    sphere_traj = new THREE.Mesh(
//        new THREE.BoxGeometry(1, 1, 1),
//        new THREE.MeshBasicMaterial({
//            color:0xffffff
//        })
//    );
//
//
//
//    sphere_traj.__dirtyPosition = true;
//
//    sphere_traj.position.set(0,20,0);
//    scene.add(sphere_traj)

//    trajCap.initial();
}


function generateTexture() {

    var size = 150;
    // create canvas
   var canvas = document.createElement( 'canvas' );
    canvas.width = size;
    canvas.height = size;

    // get context
    var context = canvas.getContext( '2d' );

    // draw gradient

    context.rect( 0, 0, size-50, size );

    var gradient = context.createLinearGradient( 0, 0, size-50, size );

    gradient.addColorStop(0, '#ffffff'); // light blue
    gradient.addColorStop(1, 'transparent'); // dark blue
    context.fillStyle = gradient;
    context.fill();

    return canvas;

}