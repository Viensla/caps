var socket = io.connect();
var canvas, ctx;
var Game;

var $plpart, $vlpart;

var CreateMutliplayerParty;

jQuery(function($){
    $plpart = $('.pl-part');
    $vlpart = $('.vl-part');

    CreateMutliplayerParty = function(){

        var IO = {

            init: function() {
                IO.socket = socket;
                IO.bindEvents();
            },

            bindEvents : function() {
                IO.socket.on('connected', IO.onConnection);
                IO.socket.on('newGameCreated', IO.onNewGameCreated );
                IO.socket.on('playerJoinedRoom', IO.playerJoinedRoom );
                IO.socket.on('createNewPlayer', IO.createNewPlayer);
                IO.socket.on('startParty', IO.onStartParty);


                IO.socket.on('playerUpdateMove', Game.Host.playerUpdateMove);
                IO.socket.on('playerUpdateLaunch', Game.Host.playerUpdateLaunch);
                IO.socket.on('getEnemyInfo', Game.Host.showEnemy);
                IO.socket.on('enemyChooseBottle', Game.Host.enemyChooseBottle);

                IO.socket.on('enemyCaps', Game.Host.enemyCaps);

                IO.socket.on('getHostInfo', Game.Player.getHostInfo);
                //Display errors
                IO.socket.on('error', IO.error );
            },


            onConnection : function(data) {
                Game.socketId = IO.socket.socket.sessionid;
                console.log(data.message);
            },

            onNewGameCreated : function(data){
                Game.Host.gameInit(data);
            },

            playerJoinedRoom : function(data) {
                Game[Game.role].updateWaitingScreen(data);
            },

            getEnemyInfo:function(data){
            },
            createNewPlayer : function(data){
    //            console.log(data);
            },

            onStartParty: function(data){
                Game[Game.role].showPartyScreen(data);
            },

            error : function(data) {
                alert(data.message);
            }
        };

        Game = {
            gameId : 0,
            role : '',
            socketId : '',
            partyOn: false,

            init : function(){
                Game.cacheScreens();
                Game.bindEvents();
                Game.showIntroTpl();
            },

            bindEvents: function () {
                // Host
                Game.$doc.on('click', '#btnCreateGame', Game.Host.onCreateClick);
                Game.$doc.on('click', '#btnStartParty',Game.Host.onStartPartyClick);

                // Player
                Game.$doc.on('click', '#btnJoinGame', Game.Player.onJoinClick);
                Game.$doc.on('click', '#btnStart',Game.Player.onPlayerStartClick);

            },

            cacheScreens : function(){
                Game.$doc = $(document);

                // Templates
                Game.$area = $('#game-area');
                Game.$tplIntroScreen = $('#intro-screen-template').html();
                Game.$tplNewGame = $('#new-game-screen-template').html();
                Game.$tplJoinGame = $('#join-game-template').html();
                Game.$tplGamerScreen = $('#gamer-screen-template').html();
                Game.$tplPartyScreen = $('#party-screen-template').html();
            },
            showIntroTpl : function(){
                Game.$area.html(Game.$tplIntroScreen);
                console.log('Intro screen displayed');
            },




            // HOST -------------------------------------------------------------------------------------------------------------------

            Host : {
                players : [],
                numPlayersInRoom : 0,
                onCreateClick: function () {
                    console.log('Clicked "Create A Game"');
                    IO.socket.emit('hostCreateNewGame');
                },

                gameInit: function (data) {
                    Game.gameId = data.gameId;
                    Game.socketId = data.socketId;
                    Game.Player.socketId = data.socketId;

                    Game.role = 'Host';
                    Game.Host.numPlayersInRoom = 0;
                    Game.Host.displayNewGameScreen();
                    console.log("Game started with ID: " + Game.gameId + ' by host: ' + Game.socketId);
                },

                displayNewGameScreen : function() {
                    // Fill the game screen
                    Game.$area.html(Game.$tplNewGame);

                    // Display the URL on screen
                    $('#url-connect').text(window.location.href);

                    // Show the gameId on screen
                    $('#code-connect').text(Game.gameId);

                    Game.$area.append(Game.$tplJoinGame);
                    $('#inputGameId').attr('value',Game.gameId).prop('type', 'hidden');


                },

                updateWaitingScreen: function(data) {
                    // Update host screen
                    $('#playersWaiting').append('<p>Player ' + data.playerName + ' joined the game.</p>');
                    // Store the new player's data on the Host.
                    Game.Host.players.push(data);

                    // Increment the number of players in the room
                    Game.Host.numPlayersInRoom += 1;

                    if (Game.Host.numPlayersInRoom > 1) {
                        IO.socket.emit('hostRoomReady',Game.gameId);
                        $('#cacheStartParty').show();
                    }
                },

                onStartPartyClick: function(){
                    IO.socket.emit('hostStartParty', {gameId : Game.gameId, hostPlayer : Game.Host.players});
                },

                showPartyScreen: function(){
                    var i = 0;

                    Game.partyOn = true;

                    Game.$area.html(Game.$tplPartyScreen);

                    Game.$area.html($('#caps-game'));

                    CAPS.launchGame();

                    IO.socket.emit('hostSendInfo', {gameId : Game.gameId, name : Game.Player.name, playerID:Game.socketId});
                },

                showEnemy:function(data){
                    if(Game.role == 'Host' && Game.Player.socketId != data.playerID){
                        Game.Enemy.name = data.name;
                        Game.Enemy.id = data.playerID;
                        $plpart.find('h3').text(Game.Player.name);
                        $vlpart.find('h3').text(Game.Enemy.name);
                    }
                },


                playerUpdateMove:function(data){
                    if(data.playerID == Game.Enemy.id){
                        Viensla.livePos.x = -data.pos.x;
                        Viensla.livePos.y = data.pos.y;
                        Viensla.livePos.z = data.pos.z;
                        Viensla.liveVector = new THREE.Vector3(Viensla.livePos.x,Viensla.livePos.y, Viensla.livePos.z);
                    }
                },

                playerUpdateLaunch:function(data){
                    if(data.playerID == Game.Enemy.id){
                        console.log(data.shot);
                        Viensla.livePos.x = -data.shot.x;
                        Viensla.livePos.y = data.shot.y;
                        Viensla.livePos.z = data.shot.z;
                        Viensla.liveVector = new THREE.Vector3(Viensla.livePos.x,Viensla.livePos.y, Viensla.livePos.z);
                        Viensla.shootCaps(data.shot);
                    }
                },
                enemyChooseBottle : function(data){
                    if(data.playerID == Game.Enemy.id){
                        Viensla.changeBottle(data.bottle);
                    }
                },
                enemyCaps : function(data){
                    if(data.playerID == Game.Enemy.id){
                        console.log('enemy caps you !')
                        Player.drink();
                    }
                }



            },
            // PlAYERS -------------------------------------------------------------------------------------------------------------------

            Player : {
                hostSocketId: '',
                name: '',
                socketId : '',
                onJoinClick: function () {
                    // Display the Join Game HTML on the player's screen.
                    Game.$area.html(Game.$tplJoinGame);
                },
                onPlayerStartClick: function() {
                    // collect data to send to the server
                    var data = {
                        gameId : +($('#inputGameId').val()),
                        playerName : $('#inputPlayerName').val() || 'Anonymous',
                        x: 0,
                        y: 0
                    };

                    // Send the gameId and playerName to the server
                    IO.socket.emit('playerJoinGame', data);

                    // Set the appropriate properties for the current player.
                    if(Game.role != 'Host')
                        Game.role = 'Player';

                    Game.Player.name = data.playerName;

                },

                updateWaitingScreen : function(data) {
                    if(IO.socket.socket.sessionid === data.socketId){
                        Game.role = 'Player';
                        Game.gameId = data.gameId;
                        Game.Player.socketId = data.socketId;
                        $('#playerWaitingMessage').text('Joined Game ' + data.gameId + '. Please wait for game to begin.');
                    }
                },
                showPartyScreen: function(data){
                    var i = 0;
                    Game.$area.html(Game.$tplPartyScreen);
                    Game.partyOn = true;
                    Game.Host.players = data.hostPlayer;
                    Game.$area.html($('#caps-game'));

                    CAPS.launchGame();

                },
                getHostInfo:function(data){
                    if(Game.role == 'Player' && Game.Player.socketId != data.playerID){
                        Game.Enemy.name = data.name;
                        Game.Enemy.id = data.playerID;
                        $plpart.find('h3').text(Game.Player.name);
                        $vlpart.find('h3').text(Game.Enemy.name);
                    }
                },
                playerMoving : function(data){
                    IO.socket.emit('playerMove', {
                        playerName: Game.Player.name,
                        playerID:Game.Player.socketId,
                        gameId: Game.gameId,
                        pos:data
                    });
                },
                playerLaunch : function(data){
                    IO.socket.emit('playerShoot', {
                        playerName: Game.Player.name,
                        playerID:Game.Player.socketId,
                        gameId: Game.gameId,
                        shot:data
                    });
                },
                playerChooseBottle : function(bottle){
                    IO.socket.emit('playerChooseBottle', {
                        gameId: Game.gameId,
                        playerID:Game.Player.socketId,
                        bottle: bottle
                    });
                },
                playerCaps : function(){
                    IO.socket.emit('playerCaps', {
                        gameId: Game.gameId,
                        playerID:Game.Player.socketId
                    });
                }
            },


            Enemy : {
                id:'',
                name :''
            }
        };

        IO.init();
        Game.init();
    };

    CreateMutliplayerParty();
}($));