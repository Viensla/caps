

var Player = {
    score : 0,
    launched : 0,
    isPlaying : true,
    totalLaunched : 0,
    lives : 0,
    drunked : 1,
    capmat : null,
    stickermat : null,
    outline : '',
    pos : {x:0, y:50, z:112},
    sticker:null,
    initialize : function(){
        if(!this.capmat){
            this.capmat = caps_material.chimey.clone();
        }
        if(!this.stickermat){
            this.stickermat = new THREE.MeshBasicMaterial({map:THREE.ImageUtils.loadTexture('images/beers/stickers/chimais.png'),side:2, transparent:true,opacity:1});
        }
        var bottle_material = new THREE.MeshBasicMaterial( {  color:Player.capmat.materials[1].color, side:2 } )
        bottle_geo.buffersNeedUpdate = true;
        bottle_geo.uvsNeedUpdate = true;

        this.bottle = new Physijs.CylinderMesh(
            bottle_geo,
            bottle_material,
            0, {friction : 0.1, restitution : 0.1}
        );
        this.bottle.scale.set(10,12,10);
        this.bottle.castShadow = false;
        this.bottle.receiveShadow = true;
        this.bottle.name = 'plBottle';


        //Add Wall to level
        var transparent_side =  new THREE.MeshBasicMaterial({
            color:Player.capmat.materials[1].color,
            transparent:true,
            opacity:0
        });


        var sticker_materials = [
            transparent_side,
            transparent_side,
            transparent_side,
            transparent_side,
            Player.stickermat,
            transparent_side
        ];
        this.sticker = new Physijs.BoxMesh(
            new THREE.BoxGeometry(0.8, 1, 0.1),
            new THREE.MeshFaceMaterial(sticker_materials),
            0
        );
        this.sticker.position.x = 0;
        this.sticker.position.y = -0.3;
        this.sticker.position.z = 0.50;

        var bot_sh_mat = new THREE.MeshBasicMaterial({ color:shadowColors[Game.Player.caps],  side:2 });
        var sh_bottle = new Physijs.CylinderMesh(
            bottle_geo,
            bot_sh_mat,
            0, {friction : 0.1, restitution : 0.1}
        );
        sh_bottle.position.x = -0.03;
//        sh_bottle.position.y = -0.05;
        sh_bottle.position.z = 0.01;


        var neck = new Physijs.CylinderMesh(
            new THREE.CylinderGeometry(2, 2, 1, 6, 6 ),
            new THREE.MeshLambertMaterial({
                color: 0xffffff,
                transparent : true,
                opacity:0
            })
        ,0);

        neck.position.x = 0;
        neck.position.y = tablefootSurfaceDim[1] +tablefootSurfaceDim[1]/2+45;
        neck.position.z = 110;

        scene.add(neck);

        Player.bottle.add(sh_bottle);
        Player.bottle.add(Player.sticker);

        Player.place({x:0, z:110});
        Player.generateBottle();

    },
    changeSticker:function(){
        var transparent_side =  new THREE.MeshBasicMaterial({
            transparent:true,
            opacity:0
        });
        var sticker_materials = [
            transparent_side,
            transparent_side,
            transparent_side,
            transparent_side,
            Player.stickermat,
            transparent_side
        ];
        this.sticker.material = new THREE.MeshFaceMaterial(sticker_materials);
    },
    place : function(axis){
        this.bottle.position.y = tablefootSurfaceDim[1] +tablefootSurfaceDim[1]/2+23;
        this.bottle.position.x = axis.x;
        this.bottle.position.z = axis.z;
    },
    generateBottle : function(){
        scene.add(Player.bottle);
    },
    generateCaps : function(){
        this.bottlecaps = new Physijs.CylinderMesh(geo_caps, Player.capmat, 0.3,  {friction : 0, restitution : 1});
        this.bottlecaps.castShadow = true;
        this.bottlecaps.receiveShadow = true;

        this.bottlecaps.scale.set(capModelscale,capModelscale,capModelscale);
        this.bottlecaps.rotation.x = Math.PI;

        this.bottlecaps.position.y = Player.bottle.position.y + 23;
        this.bottlecaps.position.x = Player.bottle.position.x;
        this.bottlecaps.position.z = Player.bottle.position.z;




        var sub = new Physijs.CylinderMesh(
            new THREE.CylinderGeometry(1.5, 1.5, 0, 32, 32 ),
            new THREE.MeshLambertMaterial({
                color: Player.capmat.materials[1].color,
                transparent : true,
                opacity:1
            })
        ,0);

        sub.position.x = 0;
        sub.position.y = 0.3;
        sub.position.z = 0;

        var collisionSphere = new Physijs.CylinderMesh(
            new THREE.CylinderGeometry(3, 3, 1, 32, 32 ),
            new THREE.MeshLambertMaterial({
                transparent : true,
                opacity:0
            })
            ,0.1);
        this.bottlecaps.add(collisionSphere);


        this.bottlecaps.add(sub);
//        this.bottlecaps.add(neck);

        this.bottlecaps.name = 'plCap';
        this.bottlecaps.collided = false;

        scene.add(Player.bottlecaps);
    },

    drink : function(){
        Party.vlcaps();
    }

}

var perfectShoot = [
    {
        y : 130,
        x  : -2,
        pwr : 35
    },
    {
        y : 110,
        x  : -1,
        pwr : 75
    },
    {
        y : 130,
        x  : 2,
        pwr : 35
    },
    {
        y : 180,
        x  : -2,
        pwr : 21
    }
];


var Viensla = {
    score : 0,
    launched : 0,
    totalLaunched : 0,
    isPerfect : false,
    imprecision : 16,
    isPlaying : false,
    isShooting : false,
    lives : 0,
    capmat : null,
    livePos : {x:0,y:0,z: -90},
    liveVector : null,
    initialize : function(){

        if(!this.capmat){
            this.capmat = caps_material.ptp.clone();
        }

        var bottle_material = Physijs.createMaterial(
            new THREE.MeshBasicMaterial( {  color: Viensla.capmat.materials[1].color,  shininess: 10,side:2 } )
        );

        this.bottle = new Physijs.CylinderMesh(
            bottle_geo,
            bottle_material,
            0, {friction : 0.1, restitution : 0.1}
        );
        this.bottle.scale.set(10,12,10);
        this.bottle.castShadow = false;
        this.bottle.receiveShadow = true;
        this.bottle.name = 'vlBottle';

        var neck = new Physijs.CylinderMesh(
            new THREE.CylinderGeometry(2, 2, 1, 6, 6 ),
            new THREE.MeshLambertMaterial({
                color: 0xffffff,
                transparent : true,
                opacity:0
            })
            ,0);

        neck.position.x = 0;
        neck.position.y = tablefootSurfaceDim[1] +tablefootSurfaceDim[1]/2+45;
        neck.position.z = -110;

        scene.add(neck);


        Viensla.place({x:0, z:-110});
        Viensla.generateBottle();

//        Viensla.generateCursor();

    },
    place : function(axis){
        this.bottle.position.y = tablefootSurfaceDim[1] +tablefootSurfaceDim[1]/2+23;
        this.bottle.position.x = axis.x;
        this.bottle.position.z = axis.z;
    },
    generateBottle : function(){
        scene.add(Viensla.bottle);
//        Viensla.generateCaps();
    },
    generateCursor : function(){

        this.cursor = new THREE.Mesh(
            new THREE.SphereGeometry( 2, 32, 32 ),
            new THREE.MeshBasicMaterial( {  color: Viensla.capmat.materials[1].color,  shininess: 10,side:2 }));
        this.cursor.position.y = Viensla.livePos.y;
        this.cursor.position.x = Viensla.livePos.x;
        this.cursor.position.z = Viensla.livePos.z;

        scene.add(Viensla.cursor);
    },
    generateCaps : function(){

        this.bottlecaps = new Physijs.CylinderMesh(geo_caps, Viensla.capmat,  0.3, {friction : 0, restitution : 1});
        this.bottlecaps.castShadow = true;
        this.bottlecaps.receiveShadow = true;

        this.bottlecaps.scale.set(capModelscale,capModelscale,capModelscale);
        this.bottlecaps.rotation.x = Math.PI;

        this.bottlecaps.position.y = Viensla.bottle.position.y + 23;
        this.bottlecaps.position.x = Viensla.bottle.position.x;
        this.bottlecaps.position.z = Viensla.bottle.position.z;


        var neck = new Physijs.CylinderMesh(
            new THREE.CylinderGeometry(2, 2, 0.4, 10, 10 ),
            Physijs.createMaterial(
                new THREE.MeshLambertMaterial({
                    color: 0xffffff,
                    transparent : true,
                    opacity:0
                }))
            ,0);
        neck.position.x = 0;
        neck.position.y = 1;
        neck.position.z = 0;

        var sub = new Physijs.CylinderMesh(
            new THREE.CylinderGeometry(1.5, 1.5, 0, 32, 32 ),
            new THREE.MeshLambertMaterial({
                color: Viensla.capmat.materials[1].color,
                transparent : true,
                opacity:1
            })
            ,0);
        sub.position.x = 0;
        sub.position.y = 0.3;
        sub.position.z = 0;

        var collisionSphere = new Physijs.CylinderMesh(
            new THREE.CylinderGeometry(3, 3, 1, 32, 32 ),
            new THREE.MeshLambertMaterial({
                transparent : true,
                opacity:0
            })
            ,0.1);
        this.bottlecaps.add(collisionSphere);


        this.bottlecaps.add(sub);
//        this.bottlecaps.add(neck);

        this.bottlecaps.name = 'vlCap';
        this.bottlecaps.collided = false;

        scene.add(Viensla.bottlecaps);
    },
    shootCaps : function(data){
        Viensla.isPlaying = true;
        Player.isPlaying = false;

        var  launchVector = new THREE.Vector3,
            _vector = new THREE.Vector3,
            _angVector = new THREE.Vector3,
            _posVector = new THREE.Vector3;

        globalDirection = -1;

        _posVector.set(Viensla.livePos.x,Viensla.livePos.y, Viensla.livePos.z);

        create_caps('vl');

        playedCaps.position.copy(_posVector);

        playedCaps.__dirtyPosition = true;
        playedCaps.floating = false;

        _vector.set( 1, 1, 1 );
        _angVector.set( -data.rdms[0], data.rdms[1], data.rdms[2]);
        playedCaps.setAngularFactor( _vector );

        playedCaps.setLinearFactor( _vector );
        launchVector.set(1,1, -data.pwr * playerstrengh * globalDirection);
        playedCaps.setLinearVelocity( launchVector );
        playedCaps.setAngularVelocity( _angVector );

        playedCaps = null;

        Viensla.totalLaunched++;

        setTimeout(function(){
            Viensla.isPlaying = false;
            Player.isPlaying = true;
            Party.setTurn();
        }, 500);


    },
    launchCaps : function(){
        Viensla.isPlaying = true;
        Player.isPlaying = false;

        var  launchVector = new THREE.Vector3,
            _vector = new THREE.Vector3,
            _angVector = new THREE.Vector3,
            _posVector = new THREE.Vector3,
            randomY = Math.random()*20 + 80,
            randomX = Math.random()*10 - 5,
            shot = Math.round(Math.random()*3);


        shot = perfectShoot[shot];

        globalDirection = -1;

        power = Math.round(shot.pwr +  (Math.random()-0.5) * Viensla.imprecision);

        randomY = Math.round(shot.y +  (Math.random()-0.5) * Viensla.imprecision);

        randomX = Math.round(shot.x +  (Math.random()-0.5) * Viensla.imprecision);

        if(Viensla.isPerfect){
            var alea = Math.round(Math.random()*3);
            randomY = perfectShoot[alea].y;
            randomX  = perfectShoot[alea].x;
            power = perfectShoot[alea].pwr;
        }

        randomY += 25;


        _posVector.set(randomX,randomY, playerDistance*globalDirection + 40);

//        _posVector.set(Viensla.livePos.x,Viensla.livePos.y, Viensla.livePos.z);

        create_caps('vl');

        playedCaps.position.copy(_posVector);
        playedCaps.__dirtyPosition = true;

        playedCaps.floating = false;

        _vector.set( 1, 1, 1 );
        _angVector.set( Math.random()*10, Math.random()*10, Math.random()*20);
        playedCaps.setAngularFactor( _vector );

        playedCaps.setLinearFactor( _vector );
        launchVector.set(1,-3, - power * strengh * globalDirection);
        playedCaps.setLinearVelocity( launchVector );
        playedCaps.setAngularVelocity( _angVector );

        playedCaps = null;

    },

    changeBottle:function(bottle){
        $vlpart.removeClass('chimey foster ptp lef pelle chouffe');
        $vlpart.addClass(bottle);
        $('#versus-bar .vl').addClass(bottle);

        Viensla.capmat = caps_material[bottle];
        Viensla.bottle.material.color = Viensla.capmat.materials[1].color;

    }


}




