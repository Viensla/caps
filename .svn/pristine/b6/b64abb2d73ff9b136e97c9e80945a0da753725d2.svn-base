function create_lights(){
    var frontLight	= new THREE.DirectionalLight(0xffffff, 0.7);
    frontLight.castShadow = true;
    frontLight.shadowDarkness = .1;
    frontLight.shadowBias = -.0001;
    frontLight.shadowCameraNear = 1;
    frontLight.shadowMapWidth = 2048;
    frontLight.shadowMapHeight = 2048;
    frontLight.shadowCameraLeft = planeWIDTH/2;
    frontLight.shadowCameraTop = - planeHEIGHT/2;
    frontLight.shadowCameraRight = - planeWIDTH/2;
    frontLight.shadowCameraBottom = planeHEIGHT/2;


    frontLight.position.set(0, 100, 80);

    scene.add( frontLight );

    var backLight	= new THREE.DirectionalLight(0xffffff, 0.7);

    backLight.castShadow = true;
    backLight.shadowDarkness = .1;
    backLight.shadowBias = -.0001;
    backLight.shadowCameraNear = 1;
    backLight.shadowMapWidth = 2048;
    backLight.shadowMapHeight = 2048;
    backLight.shadowCameraLeft = planeWIDTH/2;
    backLight.shadowCameraTop = - planeHEIGHT/2;
    backLight.shadowCameraRight = - planeWIDTH/2;
    backLight.shadowCameraBottom = planeHEIGHT/2;


    backLight.position.set(0, 100, -80);

    scene.add( backLight );


    var rightLight	= new THREE.DirectionalLight(0xfefefe, 0.1);

    rightLight.castShadow = true;
    rightLight.shadowDarkness = .05;
    rightLight.shadowBias = -.0001;
    rightLight.shadowCameraNear = 1;
    rightLight.shadowMapWidth = 2048;
    rightLight.shadowMapHeight = 2048;
    rightLight.shadowCameraLeft = planeWIDTH/2;
    rightLight.shadowCameraTop = - planeHEIGHT/2;
    rightLight.shadowCameraRight = - planeWIDTH/2;
    rightLight.shadowCameraBottom = planeHEIGHT/2;


    rightLight.position.set(80, 40, 30);

//    scene.add( rightLight );


    var leftLight	= new THREE.DirectionalLight(0xfefefe, 0.1);

    leftLight.castShadow = true;
    leftLight.shadowDarkness = .05;
    leftLight.shadowBias = -.0001;
    leftLight.shadowCameraNear = 1;
    leftLight.shadowMapWidth = 2048;
    leftLight.shadowMapHeight = 2048;
    leftLight.shadowCameraLeft = planeWIDTH/2;
    leftLight.shadowCameraTop = - planeHEIGHT/2;
    leftLight.shadowCameraRight = - planeWIDTH/2;
    leftLight.shadowCameraBottom = planeHEIGHT/2;


    leftLight.position.set(-100, 70, -10);

//    scene.add( leftLight );
//
//
//    // LIGHTS
    scene.add( new THREE.AmbientLight( 0x000000 ) );
//
//
//
//    var directionalLight = new THREE.DirectionalLight(/*Math.random() * 0xffffff*/0xeeeeee );
//    directionalLight.position.set( .2, -1, .2 );
//    directionalLight.position.normalize();
//    scene.add( directionalLight );
//
    pointLight = new THREE.PointLight( 0xffffff, .6 );
    scene.add( pointLight );

// LIGHTS


    hemiLight = new THREE.HemisphereLight( 0xffffff, 0xffffff, 0.6 );
    hemiLight.color.setHSL( 0.6, 1, 0.6 );
    hemiLight.groundColor.setHSL( 0.095, 1, 0.75 );
    hemiLight.position.set( 0, 500, 0 );
    scene.add( hemiLight );

//    var dirLight = new THREE.DirectionalLight( 0xffffff, 1 );
//    dirLight.color.setHSL( 0.1, 1, 0.95 );
//    dirLight.position.set( -1, 90, 1 );
//    dirLight.position.multiplyScalar( 50 );
//    scene.add( dirLight );
//
//    dirLight.castShadow = true;
//
//    dirLight.shadowMapWidth = 2048;
//    dirLight.shadowMapHeight = 2048;
//
//    var d = planeHEIGHT/2;
//
//    dirLight.shadowCameraLeft = -d;
//    dirLight.shadowCameraRight = d;
//    dirLight.shadowCameraTop = d;
//    dirLight.shadowCameraBottom = -d;
//
//    dirLight.shadowCameraFar = 3500;
//    dirLight.shadowCameraNear = 1;
//    dirLight.shadowBias = -0.0001;
//    dirLight.shadowDarkness = 0.35;




}























var pointLight;

var light1, light2, light3, light4, light5,light6,light7,light8,light9,light10,light11,light12;
function addFloatingLights(){
    var sphere = new THREE.SphereGeometry( 0.5, 16, 8 );

    light1 = new THREE.PointLight( 0xff0040, 2, 50 );
    light1.add( new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( { color: 0xff0040 } ) ) );
    scene.add( light1 );

    light2 = new THREE.PointLight( 0x0040ff, 2, 50 );
    light2.add( new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( { color: 0x0040ff } ) ) );
    scene.add( light2 );

    light3 = new THREE.PointLight( 0x80ff80, 2, 50 );
    light3.add( new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( { color: 0x80ff80 } ) ) );
    scene.add( light3 );

    light4 = new THREE.PointLight( 0xffaa00, 2, 50 );
    light4.add( new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( { color: 0xffaa00 } ) ) );
    scene.add( light4 );

    light5 = new THREE.PointLight( 0xff0040, 2, 50 );
    light5.add( new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( { color: 0xff0040 } ) ) );
    scene.add( light5 );

    light6 = new THREE.PointLight( 0x0040ff, 2, 50 );
    light6.add( new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( { color: 0x0040ff } ) ) );
    scene.add( light6 );

    light7 = new THREE.PointLight( 0x80ff80, 2, 50 );
    light7.add( new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( { color: 0x80ff80 } ) ) );
    scene.add( light7 );

    light8 = new THREE.PointLight( 0xffaa00, 2, 50 );
    light8.add( new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( { color: 0xffaa00 } ) ) );
    scene.add( light8 );

    light9 = new THREE.PointLight( 0xff0040, 2, 50 );
    light9.add( new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( { color: 0xff0040 } ) ) );
    scene.add( light9 );

    light10 = new THREE.PointLight( 0x0040ff, 2, 50 );
    light10.add( new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( { color: 0x0040ff } ) ) );
    scene.add( light10 );

    light11 = new THREE.PointLight( 0x80ff80, 2, 50 );
    light11.add( new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( { color: 0x80ff80 } ) ) );
    scene.add( light11 );

    light12 = new THREE.PointLight( 0xffaa00, 2, 50 );
    light12.add( new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( { color: 0xffaa00 } ) ) );
    scene.add( light12 );
}

function animateFloatingLights(time){
    light1.position.x = Math.sin( time * 0.7 ) * 50;
    light1.position.y = Math.cos( time * 0.5 ) * 50 + 100;
    light1.position.z = Math.cos( time * 0.3 ) * 50;

    light2.position.x = Math.cos( time * 0.3 ) * 50;
    light2.position.y = Math.sin( time * 0.5 ) * 50 + 100;
    light2.position.z = Math.sin( time * 0.7 ) * 50;

    light3.position.x = Math.sin( time * 0.7 ) * 50;
    light3.position.y = Math.cos( time * 0.3 ) * 50 + 100;
    light3.position.z = Math.sin( time * 0.5 ) * 50;

    light4.position.x = Math.sin( time * 0.3 ) * 50;
    light4.position.y = Math.cos( time * 0.7 ) * 50 + 100;
    light4.position.z = Math.sin( time * 0.5 ) * 50;

    light5.position.x = Math.sin( time * 0.3 ) * 50;
    light5.position.y = Math.cos( time * 0.7 ) * 50 + 100;
    light5.position.z = Math.sin( time * 0.5 ) * 50;

    light6.position.x = Math.sin( time * 0.3 ) * 50;
    light6.position.y = Math.cos( time * 0.7 ) * 50 + 100;
    light6.position.z = Math.sin( time * 0.5 ) * 50;

    light7.position.x = Math.sin( time * 0.3 ) * 50;
    light7.position.y = Math.cos( time * 0.7 ) * 50 + 100;
    light7.position.z = Math.sin( time * 0.5 ) * 50;

    light8.position.x = Math.sin( time * 0.3 ) * 50;
    light8.position.y = Math.cos( time * 0.7 ) * 50 + 100;
    light8.position.z = Math.sin( time * 0.5 ) * 50;

    light9.position.x = Math.sin( time * 0.3 ) * 50;
    light9.position.y = Math.cos( time * 0.7 ) * 50 + 100;
    light9.position.z = Math.sin( time * 0.5 ) * 50;

    light10.position.x = Math.sin( time * 0.3 ) * 50;
    light10.position.y = Math.cos( time * 0.7 ) * 50 + 100;
    light10.position.z = Math.sin( time * 0.5 ) * 50;

    light11.position.x = Math.sin( time * 0.3 ) * 50;
    light11.position.y = Math.cos( time * 0.7 ) * 50 + 100;
    light11.position.z = Math.sin( time * 0.5 ) * 50;

    light12.position.x = Math.sin( time * 0.3 ) * 50;
    light12.position.y = Math.cos( time * 0.7 ) * 50 + 100;
    light12.position.z = Math.sin( time * 0.5 ) * 50;

}