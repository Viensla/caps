
var caps_material, sticker_materials;
var mat_caps_foster;
var mat_caps_chimey;
var mat_caps_pelle;
var mat_caps_lef;
var mat_caps_chouffe;
var mat_caps_ptp;

var geo_caps, bottle_geo, bottle_mat;

function loadBottleTools(){
    var loader = new THREE.JSONLoader();

    sticker_materials = {
        'chimey':new THREE.MeshBasicMaterial({map:THREE.ImageUtils.loadTexture('images/beers/stickers/small/chimais.png'),side:2, transparent:true,opacity:1}),
        'foster':new THREE.MeshBasicMaterial({map:THREE.ImageUtils.loadTexture('images/beers/stickers/small/faustaire.png'),side:2, transparent:true,opacity:1}),
        'lef':new THREE.MeshBasicMaterial({map:THREE.ImageUtils.loadTexture('images/beers/stickers/small/lef.png'),side:2, transparent:true,opacity:1}),
        'pelle':new THREE.MeshBasicMaterial({map:THREE.ImageUtils.loadTexture('images/beers/stickers/small/pelle.png'),side:2, transparent:true,opacity:1}),
        'chouffe':new THREE.MeshBasicMaterial({map:THREE.ImageUtils.loadTexture('images/beers/stickers/small/shouffe.png'),side:2, transparent:true,opacity:1}),
        'ptp':new THREE.MeshBasicMaterial({map:THREE.ImageUtils.loadTexture('images/beers/stickers/small/ptp.png'),side:2, transparent:true,opacity:1})
    };
    sticker_materials.chimey.map.minFilter = THREE.LinearFilter;
    sticker_materials.foster.map.minFilter = THREE.LinearFilter;
    sticker_materials.lef.map.minFilter = THREE.LinearFilter;
    sticker_materials.pelle.map.minFilter = THREE.LinearFilter;
    sticker_materials.chouffe.map.minFilter = THREE.LinearFilter;
    sticker_materials.ptp.map.minFilter = THREE.LinearFilter;


    loader.load( 'model/3D/cap_light.json', function ( cap_geometry, cap_materials ) {
        loader.load( 'model/3D/bottle_light.json', function ( bottle_geometry, bottle_materials ) {

            bottle_geo = bottle_geometry;


            var bottle_material = bottle_materials[ 0 ];
            bottle_material.side = 2;
            bottle_material.shininess = 0;
            bottle_material.shading = 0;
            bottle_material.reflectivity = 0;
            bottle_material.color.setHex(0xffffff);

            bottle_mat = new THREE.MeshFaceMaterial( bottle_materials );

            geo_caps = cap_geometry;
//                geo_caps = new THREE.SphereGeometry(2, 32);

            // CHIMEY CAPS ----------------------------------------------
            var copychimey  = [];
            copychimey[0] = cap_materials[0].clone();
            copychimey[1] = cap_materials[0].clone();
            copychimey[0].side = 2;
            copychimey[1].side = 2;
            copychimey[1].map = 0;



            mat_caps_chimey = new THREE.MeshFaceMaterial(copychimey);
            mat_caps_chimey.materials[1].color =  new THREE.Color(beerColors.chimey);

            // FOSTER CAPS ----------------------------------------------
            var copyfoster  =[];
            copyfoster[0] = cap_materials[1].clone();
            copyfoster[1] = cap_materials[0].clone();
            copyfoster[0].side = 2;
            copyfoster[1].side = 2;
            copyfoster[1].map = 0;

            mat_caps_foster = new THREE.MeshFaceMaterial(copyfoster);
            mat_caps_foster.materials[1].color =  new THREE.Color(beerColors.foster);

            // Leff CAPS ----------------------------------------------
            var copylef  =[];
            copylef[0] = cap_materials[2].clone();
            copylef[1] = cap_materials[0].clone();
            copylef[0].side = 2;
            copylef[1].side = 2;
            copylef[1].map = 0;

            mat_caps_lef = new THREE.MeshFaceMaterial(copylef);
            mat_caps_lef.materials[1].color =  new THREE.Color(beerColors.lef);


            // Leff CAPS ----------------------------------------------
            var copypelle  =[];
            copypelle[0] = cap_materials[3].clone();
            copypelle[1] = cap_materials[0].clone();
            copypelle[0].side = 2;
            copypelle[1].side = 2;
            copypelle[1].map = 0;

            mat_caps_pelle = new THREE.MeshFaceMaterial(copypelle);
            mat_caps_pelle.materials[1].color =  new THREE.Color(beerColors.pelle);


            // Leff CAPS ----------------------------------------------
            var copychouffe  =[];
            copychouffe[0] = cap_materials[4].clone();
            copychouffe[1] = cap_materials[0].clone();
            copychouffe[0].side = 2;
            copychouffe[1].side = 2;
            copychouffe[1].map = 0;

            mat_caps_chouffe = new THREE.MeshFaceMaterial(copychouffe);
            mat_caps_chouffe.materials[1].color =  new THREE.Color(beerColors.chouffe);

            // PTP CAPS ----------------------------------------------
            var copyptp  =[];
            copyptp[0] = cap_materials[5].clone();
            copyptp[1] = cap_materials[2].clone();
            copyptp[0].side = 2;
            copyptp[1].side = 2;
            copyptp[1].map = 0;

            mat_caps_ptp = new THREE.MeshFaceMaterial(copyptp);
            mat_caps_ptp.materials[1].color =  new THREE.Color(beerColors.ptp);


            caps_material = {
                'chimey':mat_caps_chimey,
                'foster':mat_caps_foster,
                'lef':mat_caps_lef,
                'pelle':mat_caps_pelle,
                'chouffe':mat_caps_chouffe,
                'ptp':mat_caps_ptp
            };




            initScene();
        });
    });
}
