var container, scene, renderer, camera, light, ball, plane, bottle, bottlecaps, axes, initEventHandling, initScene;
var WIDTH, HEIGHT, VIEW_ANGLE, ASPECT, NEAR, FAR;

var elements = [], selected_block = null, mouse_position = new THREE.Vector3, block_offset = new THREE.Vector3, _i, _v3 = new THREE.Vector3, intersect_plane, lookatobj;

var clock = new THREE.Clock();

Physijs.scripts.worker = '/js/physijs/physijs_worker.js';
Physijs.scripts.ammo = 'ammo.js';

container = document.querySelector('.viewport');

WIDTH = window.innerWidth;
HEIGHT = window.innerHeight;

VIEW_ANGLE = 75;
ASPECT = WIDTH / HEIGHT;
NEAR = 0.1;
FAR = 10000;



var caps_geometry = new THREE.CylinderGeometry(7, 5, 2, 32),
    caps_material = Physijs.createMaterial(
        new THREE.MeshLambertMaterial({
            color: 0xff0000
        }), 0.4, 0.8),
    bottlecaps_material = Physijs.createMaterial(
        new THREE.MeshLambertMaterial({
            color: 0x00ff00
        }), 0.4, 0.8);


initScene = function() {

    scene = new Physijs.Scene();

    scene.setGravity(new THREE.Vector3( 0, -110, 0 ));

    scene.addEventListener('update', function() {

        if ( selected_block !== null ) {

            _v3.copy( mouse_position ).add( block_offset ).sub( selected_block.position ).multiplyScalar( 5 );
            _v3.y = 0;
            selected_block.setLinearVelocity( _v3 );

            // Reactivate all of the blocks
            _v3.set( 0, 0, 0 );
            for ( _i = 0; _i < elements.length; _i++ ) {
                elements[_i].applyCentralImpulse( _v3 );
            }
        }

        scene.simulate(undefined, 2);
    });

    renderer = new THREE.WebGLRenderer({
        antialias: true
    });

    renderer.setSize(WIDTH, HEIGHT);
    renderer.shadowMapEnabled = true;
    renderer.shadowMapSoft = true;
    renderer.shadowMapType = THREE.PCFShadowMap;
    renderer.shadowMapAutoUpdate = true;

    container.appendChild(renderer.domElement);

    camera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);

    camera.position.set(10, 70, 150);
    lookatobj = scene;
    camera.lookAt(lookatobj);

    scene.add(camera);


    light = new THREE.DirectionalLight(0xffffff);
    light.position.set(0, 100, 60);
    light.castShadow = true;
    light.shadowCameraLeft = -60;
    light.shadowCameraTop = -60;
    light.shadowCameraRight = 60;
    light.shadowCameraBottom = 60;
    light.shadowCameraNear = 1;
    light.shadowCameraFar = 1000;
    light.shadowBias = -.0001;
    light.shadowMapWidth = light.shadowMapHeight = 1024;
    light.shadowDarkness = .7;

    scene.add(light);

    plane = new Physijs.BoxMesh(
        new THREE.BoxGeometry(WIDTH, HEIGHT, 2, 100, 100),
        Physijs.createMaterial(
            new THREE.MeshLambertMaterial({
                color: 0xeeeeee,
                transparent: true,
                opacity: 0.5
            }), 0.4, 0.8)
        ,0);

    plane.rotation.x = Math.PI/2;
    //plane.rotation.y = Math.PI / 24;
    plane.receiveShadow = true;

    scene.add(plane);




    intersect_plane = new THREE.Mesh(
        new THREE.PlaneGeometry( 150, 150 ),
        new THREE.MeshBasicMaterial({ opacity: 0, transparent: true })
    );
    intersect_plane.rotation.x = Math.PI / -2;
    scene.add( intersect_plane );

    axes = buildAxes( 1000 );
    scene.add(axes);

    create_bottle(0);

    create_bottle(60);

    create_bottle(-60);

    create_caps();



    scene.simulate();

    render();

    initEventHandling();


}


function render() {

    if (ball.position.y <= -50) {
        scene.remove(ball);
        create_caps();
    }

    if(ball.position.z <= -100){
        create_caps();
    }

    if(bottlecaps.position.y <= bottle.position.y){
        create_bottlecaps();
    }

    camera.lookAt(lookatobj.position);

    renderer.render(scene, camera);
    requestAnimationFrame(render);
}

function create_caps(){

    ball = new Physijs.CylinderMesh(caps_geometry, caps_material, 0.5);

    var r = {
        x: Math.PI,
        y: 0,
        z: 0
    };

    var stopVector = new THREE.Vector3( 0, 0, 0 );

    ball.rotation.set(r.x, r.y, r.z);
    ball.position.y = 60;
    //ball.position.x = 0;
    ball.position.z = 80;
    ball.castShadow = true;
    ball.receiveShadow = true;


    ball.setAngularFactor(stopVector);
    ball.setLinearFactor(stopVector);
    ball.setLinearVelocity(stopVector);
    ball.setAngularVelocity(stopVector);

    scene.add(ball);
    elements.push(ball);
}

function create_bottlecaps(){

    bottlecaps = new Physijs.CylinderMesh(caps_geometry, bottlecaps_material, 0.3);

    bottlecaps.position.y = bottle.position.y +16 ;
    bottlecaps.position.x = bottle.position.x;
    bottlecaps.position.z = bottle.position.z;

    bottlecaps.castShadow = true;
    bottlecaps.receiveShadow = true;
    scene.add(bottlecaps);
    elements.push(bottlecaps);


}

function create_bottle(xaxis){

    bottle = new Physijs.CylinderMesh(
        new THREE.CylinderGeometry(5, 7, 30, 32),
        Physijs.createMaterial(
            new THREE.MeshLambertMaterial({
                color: 0xffffff
            }), 0.4, 0.8),
        20);


    bottle.position.y = 16;
    bottle.position.x = xaxis;
    bottle.position.z = -80;

    bottle.castShadow = true;
    bottle.receiveShadow = true;
    scene.add(bottle);

    create_bottlecaps();

}



document.addEventListener(
    'keydown',
    function( ev ) {
        console.log(ev.keyCode);
        switch( ev.keyCode ) {
            case 37:
                // Left
                camera.position.x -= 1;

                break;

            case 39:
                // Right
                camera.position.x += 1;

                break;

            case 38:
                // Up
                camera.position.y += 1;

                break;

            case 40:
                // Down
                camera.position.y -= 1;
                break;

            case 32:
                // space
                create_caps();
                break;

            case 67:
                lookatobj = ball;
                break;

            case 86:
                lookatobj = bottlecaps;
                break;

            case 66:
                lookatobj = scene;
                break;
        }
    }
);

document.addEventListener(
    'scroll',
    function( ev ) {
        switch( ev.keyCode ) {
            case 37:
                // Left
                camera.position.x -= 1;

                break;

            case 39:
                // Right
                camera.position.x += 1;

                break;
            case 38:
                // Up
                camera.position.y += 1;

                break;
            case 40:
                // Down
                camera.position.y -= 1;

                break;


            case 32:
                // space
                create_caps();
                break;
        }
    }
);

initEventHandling = (function() {
    var _vector = new THREE.Vector3,
        projector = new THREE.Projector(),
        handleMouseDown, handleMouseMove, handleMouseUp;

    handleMouseDown = function( evt ) {
        var ray, intersections;

        _vector.set(
            ( evt.clientX / window.innerWidth ) * 2 - 1,
            -( evt.clientY / window.innerHeight ) * 2 + 1,
             -( evt.clientX / evt.clientY ) * 2 + 1
        );

        projector.unprojectVector( _vector, camera );

        ray = new THREE.Raycaster( camera.position, _vector.sub( camera.position ).normalize() );
        intersections = ray.intersectObjects( elements );

        if ( intersections.length > 0 ) {
            selected_block = intersections[0].object;

            _vector.set( 0, 0, 0 );
            selected_block.setAngularFactor( _vector );
            selected_block.setAngularVelocity( _vector );
            selected_block.setLinearFactor( _vector );
            selected_block.setLinearVelocity( _vector );

            mouse_position.copy( intersections[0].point );

            block_offset.subVectors( selected_block.position, mouse_position );

            intersect_plane.position.y = mouse_position.y;
        }
    };

    handleMouseMove = function( evt ) {

        var ray, intersection,
            i, scalar;

        if ( selected_block !== null ) {

            _vector.set(
                ( evt.clientX / window.innerWidth ) * 2 - 1,
                -( evt.clientY / window.innerHeight ) * 2 + 1,
                1
            );
            projector.unprojectVector( _vector, camera );

            ray = new THREE.Raycaster( camera.position, _vector.sub( camera.position ).normalize() );
            intersection = ray.intersectObject( intersect_plane );
            mouse_position.copy( intersection[0].point );
        }

    };

    handleMouseUp = function( evt ) {

        if ( selected_block !== null ) {
            _vector.set( 1, 1, 1 );
            selected_block.setAngularFactor( _vector );
            selected_block.setLinearFactor( _vector );

            selected_block = null;
        }

    };

    return function() {
        renderer.domElement.addEventListener( 'mousedown', handleMouseDown );
        renderer.domElement.addEventListener( 'mousemove', handleMouseMove );
        renderer.domElement.addEventListener( 'mouseup', handleMouseUp );
    };
})();



initScene();




function buildAxes( length ) {
    var axes = new THREE.Object3D();
    axes.add( buildAxis( new THREE.Vector3( 0, 0, 0 ), new THREE.Vector3( length, 0, 0 ), 0xFF0000, false ) ); // +X
    axes.add( buildAxis( new THREE.Vector3( 0, 0, 0 ), new THREE.Vector3( -length, 0, 0 ), 0xFF0000, true) ); // -X
    axes.add( buildAxis( new THREE.Vector3( 0, 0, 0 ), new THREE.Vector3( 0, length, 0 ), 0x00FF00, false ) ); // +Y
    axes.add( buildAxis( new THREE.Vector3( 0, 0, 0 ), new THREE.Vector3( 0, -length, 0 ), 0x00FF00, true ) ); // -Y
    axes.add( buildAxis( new THREE.Vector3( 0, 0, 0 ), new THREE.Vector3( 0, 0, length ), 0x0000FF, false ) ); // +Z
    axes.add( buildAxis( new THREE.Vector3( 0, 0, 0 ), new THREE.Vector3( 0, 0, -length ), 0x0000FF, true ) ); // -Z
    return axes;
}

function buildAxis( src, dst, colorHex, dashed ) {
    var geom = new THREE.Geometry(),
        mat;

    if(dashed) {
        mat = new THREE.LineDashedMaterial({ linewidth: 3, color: colorHex, dashSize: 3, gapSize: 3 });
    } else {
        mat = new THREE.LineBasicMaterial({ linewidth: 3, color: colorHex });
    }

    geom.vertices.push( src.clone() );
    geom.vertices.push( dst.clone() );
    geom.computeLineDistances(); // This one is SUPER important, otherwise dashed lines will appear as simple plain lines

    var axis = new THREE.Line( geom, mat, THREE.LinePieces );

    return axis;

}